/*! For license information please see main.js.LICENSE.txt */
(()=>{var e,t,n,i,r,s,o,a={143:(e,t,n)=>{"use strict";n(177);var i=n(577),r=n.n(i);var s;s=document.querySelector(".btn").dataset.content,new(r().Popover)(document.querySelector('[data-toggle="popover"]'),{placement:"top",content:`${s}`,template:'<div class="popover" role="tooltip"><h3 class="popover-header"></h3><div class="popover-body"></div></div>'})},577:function(e){e.exports=function(){"use strict";const e="transitionend",t=e=>{let t=e.getAttribute("data-bs-target");if(!t||"#"===t){let n=e.getAttribute("href");if(!n||!n.includes("#")&&!n.startsWith("."))return null;n.includes("#")&&!n.startsWith("#")&&(n=`#${n.split("#")[1]}`),t=n&&"#"!==n?n.trim():null}return t},n=e=>{const n=t(e);return n&&document.querySelector(n)?n:null},i=e=>{const n=t(e);return n?document.querySelector(n):null},r=t=>{t.dispatchEvent(new Event(e))},s=e=>!(!e||"object"!=typeof e)&&(void 0!==e.jquery&&(e=e[0]),void 0!==e.nodeType),o=e=>s(e)?e.jquery?e[0]:e:"string"==typeof e&&e.length>0?document.querySelector(e):null,a=e=>{if(!s(e)||0===e.getClientRects().length)return!1;const t="visible"===getComputedStyle(e).getPropertyValue("visibility"),n=e.closest("details:not([open])");if(!n)return t;if(n!==e){const t=e.closest("summary");if(t&&t.parentNode!==n)return!1;if(null===t)return!1}return t},l=e=>!e||e.nodeType!==Node.ELEMENT_NODE||!!e.classList.contains("disabled")||(void 0!==e.disabled?e.disabled:e.hasAttribute("disabled")&&"false"!==e.getAttribute("disabled")),c=e=>{if(!document.documentElement.attachShadow)return null;if("function"==typeof e.getRootNode){const t=e.getRootNode();return t instanceof ShadowRoot?t:null}return e instanceof ShadowRoot?e:e.parentNode?c(e.parentNode):null},d=()=>{},u=e=>{e.offsetHeight},h=()=>window.jQuery&&!document.body.hasAttribute("data-bs-no-jquery")?window.jQuery:null,f=[],p=()=>"rtl"===document.documentElement.dir,m=e=>{var t;t=()=>{const t=h();if(t){const n=e.NAME,i=t.fn[n];t.fn[n]=e.jQueryInterface,t.fn[n].Constructor=e,t.fn[n].noConflict=()=>(t.fn[n]=i,e.jQueryInterface)}},"loading"===document.readyState?(f.length||document.addEventListener("DOMContentLoaded",(()=>{for(const e of f)e()})),f.push(t)):t()},g=e=>{"function"==typeof e&&e()},_=(t,n,i=!0)=>{if(!i)return void g(t);const s=(e=>{if(!e)return 0;let{transitionDuration:t,transitionDelay:n}=window.getComputedStyle(e);const i=Number.parseFloat(t),r=Number.parseFloat(n);return i||r?(t=t.split(",")[0],n=n.split(",")[0],1e3*(Number.parseFloat(t)+Number.parseFloat(n))):0})(n)+5;let o=!1;const a=({target:i})=>{i===n&&(o=!0,n.removeEventListener(e,a),g(t))};n.addEventListener(e,a),setTimeout((()=>{o||r(n)}),s)},v=(e,t,n,i)=>{const r=e.length;let s=e.indexOf(t);return-1===s?!n&&i?e[r-1]:e[0]:(s+=n?1:-1,i&&(s=(s+r)%r),e[Math.max(0,Math.min(s,r-1))])},b=/[^.]*(?=\..*)\.|.*/,y=/\..*/,w=/::\d+$/,E={};let A=1;const C={mouseenter:"mouseover",mouseleave:"mouseout"},T=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function O(e,t){return t&&`${t}::${A++}`||e.uidEvent||A++}function x(e){const t=O(e);return e.uidEvent=t,E[t]=E[t]||{},E[t]}function k(e,t,n=null){return Object.values(e).find((e=>e.callable===t&&e.delegationSelector===n))}function D(e,t,n){const i="string"==typeof t,r=i?n:t||n;let s=$(e);return T.has(s)||(s=e),[i,r,s]}function L(e,t,n,i,r){if("string"!=typeof t||!e)return;let[s,o,a]=D(t,n,i);if(t in C){const e=e=>function(t){if(!t.relatedTarget||t.relatedTarget!==t.delegateTarget&&!t.delegateTarget.contains(t.relatedTarget))return e.call(this,t)};o=e(o)}const l=x(e),c=l[a]||(l[a]={}),d=k(c,o,s?n:null);if(d)return void(d.oneOff=d.oneOff&&r);const u=O(o,t.replace(b,"")),h=s?function(e,t,n){return function i(r){const s=e.querySelectorAll(t);for(let{target:o}=r;o&&o!==this;o=o.parentNode)for(const a of s)if(a===o)return j(r,{delegateTarget:o}),i.oneOff&&N.off(e,r.type,t,n),n.apply(o,[r])}}(e,n,o):function(e,t){return function n(i){return j(i,{delegateTarget:e}),n.oneOff&&N.off(e,i.type,t),t.apply(e,[i])}}(e,o);h.delegationSelector=s?n:null,h.callable=o,h.oneOff=r,h.uidEvent=u,c[u]=h,e.addEventListener(a,h,s)}function I(e,t,n,i,r){const s=k(t[n],i,r);s&&(e.removeEventListener(n,s,Boolean(r)),delete t[n][s.uidEvent])}function S(e,t,n,i){const r=t[n]||{};for(const s of Object.keys(r))if(s.includes(i)){const i=r[s];I(e,t,n,i.callable,i.delegationSelector)}}function $(e){return e=e.replace(y,""),C[e]||e}const N={on(e,t,n,i){L(e,t,n,i,!1)},one(e,t,n,i){L(e,t,n,i,!0)},off(e,t,n,i){if("string"!=typeof t||!e)return;const[r,s,o]=D(t,n,i),a=o!==t,l=x(e),c=l[o]||{},d=t.startsWith(".");if(void 0===s){if(d)for(const n of Object.keys(l))S(e,l,n,t.slice(1));for(const n of Object.keys(c)){const i=n.replace(w,"");if(!a||t.includes(i)){const t=c[n];I(e,l,o,t.callable,t.delegationSelector)}}}else{if(!Object.keys(c).length)return;I(e,l,o,s,r?n:null)}},trigger(e,t,n){if("string"!=typeof t||!e)return null;const i=h();let r=null,s=!0,o=!0,a=!1;t!==$(t)&&i&&(r=i.Event(t,n),i(e).trigger(r),s=!r.isPropagationStopped(),o=!r.isImmediatePropagationStopped(),a=r.isDefaultPrevented());let l=new Event(t,{bubbles:s,cancelable:!0});return l=j(l,n),a&&l.preventDefault(),o&&e.dispatchEvent(l),l.defaultPrevented&&r&&r.preventDefault(),l}};function j(e,t){for(const[n,i]of Object.entries(t||{}))try{e[n]=i}catch(t){Object.defineProperty(e,n,{configurable:!0,get:()=>i})}return e}const P=new Map,M={set(e,t,n){P.has(e)||P.set(e,new Map);const i=P.get(e);i.has(t)||0===i.size?i.set(t,n):console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(i.keys())[0]}.`)},get:(e,t)=>P.has(e)&&P.get(e).get(t)||null,remove(e,t){if(!P.has(e))return;const n=P.get(e);n.delete(t),0===n.size&&P.delete(e)}};function H(e){if("true"===e)return!0;if("false"===e)return!1;if(e===Number(e).toString())return Number(e);if(""===e||"null"===e)return null;if("string"!=typeof e)return e;try{return JSON.parse(decodeURIComponent(e))}catch(t){return e}}function q(e){return e.replace(/[A-Z]/g,(e=>`-${e.toLowerCase()}`))}const B={setDataAttribute(e,t,n){e.setAttribute(`data-bs-${q(t)}`,n)},removeDataAttribute(e,t){e.removeAttribute(`data-bs-${q(t)}`)},getDataAttributes(e){if(!e)return{};const t={},n=Object.keys(e.dataset).filter((e=>e.startsWith("bs")&&!e.startsWith("bsConfig")));for(const i of n){let n=i.replace(/^bs/,"");n=n.charAt(0).toLowerCase()+n.slice(1,n.length),t[n]=H(e.dataset[i])}return t},getDataAttribute:(e,t)=>H(e.getAttribute(`data-bs-${q(t)}`))};class F{static get Default(){return{}}static get DefaultType(){return{}}static get NAME(){throw new Error('You have to implement the static method "NAME", for each component!')}_getConfig(e){return e=this._mergeConfigObj(e),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}_configAfterMerge(e){return e}_mergeConfigObj(e,t){const n=s(t)?B.getDataAttribute(t,"config"):{};return{...this.constructor.Default,..."object"==typeof n?n:{},...s(t)?B.getDataAttributes(t):{},..."object"==typeof e?e:{}}}_typeCheckConfig(e,t=this.constructor.DefaultType){for(const i of Object.keys(t)){const r=t[i],o=e[i],a=s(o)?"element":null==(n=o)?`${n}`:Object.prototype.toString.call(n).match(/\s([a-z]+)/i)[1].toLowerCase();if(!new RegExp(r).test(a))throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option "${i}" provided type "${a}" but expected type "${r}".`)}var n}}class W extends F{constructor(e,t){super(),(e=o(e))&&(this._element=e,this._config=this._getConfig(t),M.set(this._element,this.constructor.DATA_KEY,this))}dispose(){M.remove(this._element,this.constructor.DATA_KEY),N.off(this._element,this.constructor.EVENT_KEY);for(const e of Object.getOwnPropertyNames(this))this[e]=null}_queueCallback(e,t,n=!0){_(e,t,n)}_getConfig(e){return e=this._mergeConfigObj(e,this._element),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}static getInstance(e){return M.get(o(e),this.DATA_KEY)}static getOrCreateInstance(e,t={}){return this.getInstance(e)||new this(e,"object"==typeof t?t:null)}static get VERSION(){return"5.2.3"}static get DATA_KEY(){return`bs.${this.NAME}`}static get EVENT_KEY(){return`.${this.DATA_KEY}`}static eventName(e){return`${e}${this.EVENT_KEY}`}}const R=(e,t="hide")=>{const n=`click.dismiss${e.EVENT_KEY}`,r=e.NAME;N.on(document,n,`[data-bs-dismiss="${r}"]`,(function(n){if(["A","AREA"].includes(this.tagName)&&n.preventDefault(),l(this))return;const s=i(this)||this.closest(`.${r}`);e.getOrCreateInstance(s)[t]()}))},z=".bs.alert",V=`close${z}`,U=`closed${z}`;class K extends W{static get NAME(){return"alert"}close(){if(N.trigger(this._element,V).defaultPrevented)return;this._element.classList.remove("show");const e=this._element.classList.contains("fade");this._queueCallback((()=>this._destroyElement()),this._element,e)}_destroyElement(){this._element.remove(),N.trigger(this._element,U),this.dispose()}static jQueryInterface(e){return this.each((function(){const t=K.getOrCreateInstance(this);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}R(K,"close"),m(K);const Q='[data-bs-toggle="button"]';class X extends W{static get NAME(){return"button"}toggle(){this._element.setAttribute("aria-pressed",this._element.classList.toggle("active"))}static jQueryInterface(e){return this.each((function(){const t=X.getOrCreateInstance(this);"toggle"===e&&t[e]()}))}}N.on(document,"click.bs.button.data-api",Q,(e=>{e.preventDefault();const t=e.target.closest(Q);X.getOrCreateInstance(t).toggle()})),m(X);const Y={find:(e,t=document.documentElement)=>[].concat(...Element.prototype.querySelectorAll.call(t,e)),findOne:(e,t=document.documentElement)=>Element.prototype.querySelector.call(t,e),children:(e,t)=>[].concat(...e.children).filter((e=>e.matches(t))),parents(e,t){const n=[];let i=e.parentNode.closest(t);for(;i;)n.push(i),i=i.parentNode.closest(t);return n},prev(e,t){let n=e.previousElementSibling;for(;n;){if(n.matches(t))return[n];n=n.previousElementSibling}return[]},next(e,t){let n=e.nextElementSibling;for(;n;){if(n.matches(t))return[n];n=n.nextElementSibling}return[]},focusableChildren(e){const t=["a","button","input","textarea","select","details","[tabindex]",'[contenteditable="true"]'].map((e=>`${e}:not([tabindex^="-"])`)).join(",");return this.find(t,e).filter((e=>!l(e)&&a(e)))}},G=".bs.swipe",J=`touchstart${G}`,Z=`touchmove${G}`,ee=`touchend${G}`,te=`pointerdown${G}`,ne=`pointerup${G}`,ie={endCallback:null,leftCallback:null,rightCallback:null},re={endCallback:"(function|null)",leftCallback:"(function|null)",rightCallback:"(function|null)"};class se extends F{constructor(e,t){super(),this._element=e,e&&se.isSupported()&&(this._config=this._getConfig(t),this._deltaX=0,this._supportPointerEvents=Boolean(window.PointerEvent),this._initEvents())}static get Default(){return ie}static get DefaultType(){return re}static get NAME(){return"swipe"}dispose(){N.off(this._element,G)}_start(e){this._supportPointerEvents?this._eventIsPointerPenTouch(e)&&(this._deltaX=e.clientX):this._deltaX=e.touches[0].clientX}_end(e){this._eventIsPointerPenTouch(e)&&(this._deltaX=e.clientX-this._deltaX),this._handleSwipe(),g(this._config.endCallback)}_move(e){this._deltaX=e.touches&&e.touches.length>1?0:e.touches[0].clientX-this._deltaX}_handleSwipe(){const e=Math.abs(this._deltaX);if(e<=40)return;const t=e/this._deltaX;this._deltaX=0,t&&g(t>0?this._config.rightCallback:this._config.leftCallback)}_initEvents(){this._supportPointerEvents?(N.on(this._element,te,(e=>this._start(e))),N.on(this._element,ne,(e=>this._end(e))),this._element.classList.add("pointer-event")):(N.on(this._element,J,(e=>this._start(e))),N.on(this._element,Z,(e=>this._move(e))),N.on(this._element,ee,(e=>this._end(e))))}_eventIsPointerPenTouch(e){return this._supportPointerEvents&&("pen"===e.pointerType||"touch"===e.pointerType)}static isSupported(){return"ontouchstart"in document.documentElement||navigator.maxTouchPoints>0}}const oe=".bs.carousel",ae=".data-api",le="next",ce="prev",de="left",ue="right",he=`slide${oe}`,fe=`slid${oe}`,pe=`keydown${oe}`,me=`mouseenter${oe}`,ge=`mouseleave${oe}`,_e=`dragstart${oe}`,ve=`load${oe}${ae}`,be=`click${oe}${ae}`,ye="carousel",we="active",Ee=".active",Ae=".carousel-item",Ce=Ee+Ae,Te={ArrowLeft:ue,ArrowRight:de},Oe={interval:5e3,keyboard:!0,pause:"hover",ride:!1,touch:!0,wrap:!0},xe={interval:"(number|boolean)",keyboard:"boolean",pause:"(string|boolean)",ride:"(boolean|string)",touch:"boolean",wrap:"boolean"};class ke extends W{constructor(e,t){super(e,t),this._interval=null,this._activeElement=null,this._isSliding=!1,this.touchTimeout=null,this._swipeHelper=null,this._indicatorsElement=Y.findOne(".carousel-indicators",this._element),this._addEventListeners(),this._config.ride===ye&&this.cycle()}static get Default(){return Oe}static get DefaultType(){return xe}static get NAME(){return"carousel"}next(){this._slide(le)}nextWhenVisible(){!document.hidden&&a(this._element)&&this.next()}prev(){this._slide(ce)}pause(){this._isSliding&&r(this._element),this._clearInterval()}cycle(){this._clearInterval(),this._updateInterval(),this._interval=setInterval((()=>this.nextWhenVisible()),this._config.interval)}_maybeEnableCycle(){this._config.ride&&(this._isSliding?N.one(this._element,fe,(()=>this.cycle())):this.cycle())}to(e){const t=this._getItems();if(e>t.length-1||e<0)return;if(this._isSliding)return void N.one(this._element,fe,(()=>this.to(e)));const n=this._getItemIndex(this._getActive());if(n===e)return;const i=e>n?le:ce;this._slide(i,t[e])}dispose(){this._swipeHelper&&this._swipeHelper.dispose(),super.dispose()}_configAfterMerge(e){return e.defaultInterval=e.interval,e}_addEventListeners(){this._config.keyboard&&N.on(this._element,pe,(e=>this._keydown(e))),"hover"===this._config.pause&&(N.on(this._element,me,(()=>this.pause())),N.on(this._element,ge,(()=>this._maybeEnableCycle()))),this._config.touch&&se.isSupported()&&this._addTouchEventListeners()}_addTouchEventListeners(){for(const e of Y.find(".carousel-item img",this._element))N.on(e,_e,(e=>e.preventDefault()));const e={leftCallback:()=>this._slide(this._directionToOrder(de)),rightCallback:()=>this._slide(this._directionToOrder(ue)),endCallback:()=>{"hover"===this._config.pause&&(this.pause(),this.touchTimeout&&clearTimeout(this.touchTimeout),this.touchTimeout=setTimeout((()=>this._maybeEnableCycle()),500+this._config.interval))}};this._swipeHelper=new se(this._element,e)}_keydown(e){if(/input|textarea/i.test(e.target.tagName))return;const t=Te[e.key];t&&(e.preventDefault(),this._slide(this._directionToOrder(t)))}_getItemIndex(e){return this._getItems().indexOf(e)}_setActiveIndicatorElement(e){if(!this._indicatorsElement)return;const t=Y.findOne(Ee,this._indicatorsElement);t.classList.remove(we),t.removeAttribute("aria-current");const n=Y.findOne(`[data-bs-slide-to="${e}"]`,this._indicatorsElement);n&&(n.classList.add(we),n.setAttribute("aria-current","true"))}_updateInterval(){const e=this._activeElement||this._getActive();if(!e)return;const t=Number.parseInt(e.getAttribute("data-bs-interval"),10);this._config.interval=t||this._config.defaultInterval}_slide(e,t=null){if(this._isSliding)return;const n=this._getActive(),i=e===le,r=t||v(this._getItems(),n,i,this._config.wrap);if(r===n)return;const s=this._getItemIndex(r),o=t=>N.trigger(this._element,t,{relatedTarget:r,direction:this._orderToDirection(e),from:this._getItemIndex(n),to:s});if(o(he).defaultPrevented)return;if(!n||!r)return;const a=Boolean(this._interval);this.pause(),this._isSliding=!0,this._setActiveIndicatorElement(s),this._activeElement=r;const l=i?"carousel-item-start":"carousel-item-end",c=i?"carousel-item-next":"carousel-item-prev";r.classList.add(c),u(r),n.classList.add(l),r.classList.add(l);this._queueCallback((()=>{r.classList.remove(l,c),r.classList.add(we),n.classList.remove(we,c,l),this._isSliding=!1,o(fe)}),n,this._isAnimated()),a&&this.cycle()}_isAnimated(){return this._element.classList.contains("slide")}_getActive(){return Y.findOne(Ce,this._element)}_getItems(){return Y.find(Ae,this._element)}_clearInterval(){this._interval&&(clearInterval(this._interval),this._interval=null)}_directionToOrder(e){return p()?e===de?ce:le:e===de?le:ce}_orderToDirection(e){return p()?e===ce?de:ue:e===ce?ue:de}static jQueryInterface(e){return this.each((function(){const t=ke.getOrCreateInstance(this,e);if("number"!=typeof e){if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e]()}}else t.to(e)}))}}N.on(document,be,"[data-bs-slide], [data-bs-slide-to]",(function(e){const t=i(this);if(!t||!t.classList.contains(ye))return;e.preventDefault();const n=ke.getOrCreateInstance(t),r=this.getAttribute("data-bs-slide-to");return r?(n.to(r),void n._maybeEnableCycle()):"next"===B.getDataAttribute(this,"slide")?(n.next(),void n._maybeEnableCycle()):(n.prev(),void n._maybeEnableCycle())})),N.on(window,ve,(()=>{const e=Y.find('[data-bs-ride="carousel"]');for(const t of e)ke.getOrCreateInstance(t)})),m(ke);const De=".bs.collapse",Le=`show${De}`,Ie=`shown${De}`,Se=`hide${De}`,$e=`hidden${De}`,Ne=`click${De}.data-api`,je="show",Pe="collapse",Me="collapsing",He=`:scope .${Pe} .${Pe}`,qe='[data-bs-toggle="collapse"]',Be={parent:null,toggle:!0},Fe={parent:"(null|element)",toggle:"boolean"};class We extends W{constructor(e,t){super(e,t),this._isTransitioning=!1,this._triggerArray=[];const i=Y.find(qe);for(const e of i){const t=n(e),i=Y.find(t).filter((e=>e===this._element));null!==t&&i.length&&this._triggerArray.push(e)}this._initializeChildren(),this._config.parent||this._addAriaAndCollapsedClass(this._triggerArray,this._isShown()),this._config.toggle&&this.toggle()}static get Default(){return Be}static get DefaultType(){return Fe}static get NAME(){return"collapse"}toggle(){this._isShown()?this.hide():this.show()}show(){if(this._isTransitioning||this._isShown())return;let e=[];if(this._config.parent&&(e=this._getFirstLevelChildren(".collapse.show, .collapse.collapsing").filter((e=>e!==this._element)).map((e=>We.getOrCreateInstance(e,{toggle:!1})))),e.length&&e[0]._isTransitioning)return;if(N.trigger(this._element,Le).defaultPrevented)return;for(const t of e)t.hide();const t=this._getDimension();this._element.classList.remove(Pe),this._element.classList.add(Me),this._element.style[t]=0,this._addAriaAndCollapsedClass(this._triggerArray,!0),this._isTransitioning=!0;const n=`scroll${t[0].toUpperCase()+t.slice(1)}`;this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(Me),this._element.classList.add(Pe,je),this._element.style[t]="",N.trigger(this._element,Ie)}),this._element,!0),this._element.style[t]=`${this._element[n]}px`}hide(){if(this._isTransitioning||!this._isShown())return;if(N.trigger(this._element,Se).defaultPrevented)return;const e=this._getDimension();this._element.style[e]=`${this._element.getBoundingClientRect()[e]}px`,u(this._element),this._element.classList.add(Me),this._element.classList.remove(Pe,je);for(const e of this._triggerArray){const t=i(e);t&&!this._isShown(t)&&this._addAriaAndCollapsedClass([e],!1)}this._isTransitioning=!0;this._element.style[e]="",this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(Me),this._element.classList.add(Pe),N.trigger(this._element,$e)}),this._element,!0)}_isShown(e=this._element){return e.classList.contains(je)}_configAfterMerge(e){return e.toggle=Boolean(e.toggle),e.parent=o(e.parent),e}_getDimension(){return this._element.classList.contains("collapse-horizontal")?"width":"height"}_initializeChildren(){if(!this._config.parent)return;const e=this._getFirstLevelChildren(qe);for(const t of e){const e=i(t);e&&this._addAriaAndCollapsedClass([t],this._isShown(e))}}_getFirstLevelChildren(e){const t=Y.find(He,this._config.parent);return Y.find(e,this._config.parent).filter((e=>!t.includes(e)))}_addAriaAndCollapsedClass(e,t){if(e.length)for(const n of e)n.classList.toggle("collapsed",!t),n.setAttribute("aria-expanded",t)}static jQueryInterface(e){const t={};return"string"==typeof e&&/show|hide/.test(e)&&(t.toggle=!1),this.each((function(){const n=We.getOrCreateInstance(this,t);if("string"==typeof e){if(void 0===n[e])throw new TypeError(`No method named "${e}"`);n[e]()}}))}}N.on(document,Ne,qe,(function(e){("A"===e.target.tagName||e.delegateTarget&&"A"===e.delegateTarget.tagName)&&e.preventDefault();const t=n(this),i=Y.find(t);for(const e of i)We.getOrCreateInstance(e,{toggle:!1}).toggle()})),m(We);var Re="top",ze="bottom",Ve="right",Ue="left",Ke="auto",Qe=[Re,ze,Ve,Ue],Xe="start",Ye="end",Ge="clippingParents",Je="viewport",Ze="popper",et="reference",tt=Qe.reduce((function(e,t){return e.concat([t+"-"+Xe,t+"-"+Ye])}),[]),nt=[].concat(Qe,[Ke]).reduce((function(e,t){return e.concat([t,t+"-"+Xe,t+"-"+Ye])}),[]),it="beforeRead",rt="read",st="afterRead",ot="beforeMain",at="main",lt="afterMain",ct="beforeWrite",dt="write",ut="afterWrite",ht=[it,rt,st,ot,at,lt,ct,dt,ut];function ft(e){return e?(e.nodeName||"").toLowerCase():null}function pt(e){if(null==e)return window;if("[object Window]"!==e.toString()){var t=e.ownerDocument;return t&&t.defaultView||window}return e}function mt(e){return e instanceof pt(e).Element||e instanceof Element}function gt(e){return e instanceof pt(e).HTMLElement||e instanceof HTMLElement}function _t(e){return"undefined"!=typeof ShadowRoot&&(e instanceof pt(e).ShadowRoot||e instanceof ShadowRoot)}const vt={name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var t=e.state;Object.keys(t.elements).forEach((function(e){var n=t.styles[e]||{},i=t.attributes[e]||{},r=t.elements[e];gt(r)&&ft(r)&&(Object.assign(r.style,n),Object.keys(i).forEach((function(e){var t=i[e];!1===t?r.removeAttribute(e):r.setAttribute(e,!0===t?"":t)})))}))},effect:function(e){var t=e.state,n={popper:{position:t.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(t.elements.popper.style,n.popper),t.styles=n,t.elements.arrow&&Object.assign(t.elements.arrow.style,n.arrow),function(){Object.keys(t.elements).forEach((function(e){var i=t.elements[e],r=t.attributes[e]||{},s=Object.keys(t.styles.hasOwnProperty(e)?t.styles[e]:n[e]).reduce((function(e,t){return e[t]="",e}),{});gt(i)&&ft(i)&&(Object.assign(i.style,s),Object.keys(r).forEach((function(e){i.removeAttribute(e)})))}))}},requires:["computeStyles"]};function bt(e){return e.split("-")[0]}var yt=Math.max,wt=Math.min,Et=Math.round;function At(){var e=navigator.userAgentData;return null!=e&&e.brands?e.brands.map((function(e){return e.brand+"/"+e.version})).join(" "):navigator.userAgent}function Ct(){return!/^((?!chrome|android).)*safari/i.test(At())}function Tt(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!1);var i=e.getBoundingClientRect(),r=1,s=1;t&&gt(e)&&(r=e.offsetWidth>0&&Et(i.width)/e.offsetWidth||1,s=e.offsetHeight>0&&Et(i.height)/e.offsetHeight||1);var o=(mt(e)?pt(e):window).visualViewport,a=!Ct()&&n,l=(i.left+(a&&o?o.offsetLeft:0))/r,c=(i.top+(a&&o?o.offsetTop:0))/s,d=i.width/r,u=i.height/s;return{width:d,height:u,top:c,right:l+d,bottom:c+u,left:l,x:l,y:c}}function Ot(e){var t=Tt(e),n=e.offsetWidth,i=e.offsetHeight;return Math.abs(t.width-n)<=1&&(n=t.width),Math.abs(t.height-i)<=1&&(i=t.height),{x:e.offsetLeft,y:e.offsetTop,width:n,height:i}}function xt(e,t){var n=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(n&&_t(n)){var i=t;do{if(i&&e.isSameNode(i))return!0;i=i.parentNode||i.host}while(i)}return!1}function kt(e){return pt(e).getComputedStyle(e)}function Dt(e){return["table","td","th"].indexOf(ft(e))>=0}function Lt(e){return((mt(e)?e.ownerDocument:e.document)||window.document).documentElement}function It(e){return"html"===ft(e)?e:e.assignedSlot||e.parentNode||(_t(e)?e.host:null)||Lt(e)}function St(e){return gt(e)&&"fixed"!==kt(e).position?e.offsetParent:null}function $t(e){for(var t=pt(e),n=St(e);n&&Dt(n)&&"static"===kt(n).position;)n=St(n);return n&&("html"===ft(n)||"body"===ft(n)&&"static"===kt(n).position)?t:n||function(e){var t=/firefox/i.test(At());if(/Trident/i.test(At())&&gt(e)&&"fixed"===kt(e).position)return null;var n=It(e);for(_t(n)&&(n=n.host);gt(n)&&["html","body"].indexOf(ft(n))<0;){var i=kt(n);if("none"!==i.transform||"none"!==i.perspective||"paint"===i.contain||-1!==["transform","perspective"].indexOf(i.willChange)||t&&"filter"===i.willChange||t&&i.filter&&"none"!==i.filter)return n;n=n.parentNode}return null}(e)||t}function Nt(e){return["top","bottom"].indexOf(e)>=0?"x":"y"}function jt(e,t,n){return yt(e,wt(t,n))}function Pt(e){return Object.assign({},{top:0,right:0,bottom:0,left:0},e)}function Mt(e,t){return t.reduce((function(t,n){return t[n]=e,t}),{})}const Ht={name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,n=e.state,i=e.name,r=e.options,s=n.elements.arrow,o=n.modifiersData.popperOffsets,a=bt(n.placement),l=Nt(a),c=[Ue,Ve].indexOf(a)>=0?"height":"width";if(s&&o){var d=function(e,t){return Pt("number"!=typeof(e="function"==typeof e?e(Object.assign({},t.rects,{placement:t.placement})):e)?e:Mt(e,Qe))}(r.padding,n),u=Ot(s),h="y"===l?Re:Ue,f="y"===l?ze:Ve,p=n.rects.reference[c]+n.rects.reference[l]-o[l]-n.rects.popper[c],m=o[l]-n.rects.reference[l],g=$t(s),_=g?"y"===l?g.clientHeight||0:g.clientWidth||0:0,v=p/2-m/2,b=d[h],y=_-u[c]-d[f],w=_/2-u[c]/2+v,E=jt(b,w,y),A=l;n.modifiersData[i]=((t={})[A]=E,t.centerOffset=E-w,t)}},effect:function(e){var t=e.state,n=e.options.element,i=void 0===n?"[data-popper-arrow]":n;null!=i&&("string"!=typeof i||(i=t.elements.popper.querySelector(i)))&&xt(t.elements.popper,i)&&(t.elements.arrow=i)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function qt(e){return e.split("-")[1]}var Bt={top:"auto",right:"auto",bottom:"auto",left:"auto"};function Ft(e){var t,n=e.popper,i=e.popperRect,r=e.placement,s=e.variation,o=e.offsets,a=e.position,l=e.gpuAcceleration,c=e.adaptive,d=e.roundOffsets,u=e.isFixed,h=o.x,f=void 0===h?0:h,p=o.y,m=void 0===p?0:p,g="function"==typeof d?d({x:f,y:m}):{x:f,y:m};f=g.x,m=g.y;var _=o.hasOwnProperty("x"),v=o.hasOwnProperty("y"),b=Ue,y=Re,w=window;if(c){var E=$t(n),A="clientHeight",C="clientWidth";E===pt(n)&&"static"!==kt(E=Lt(n)).position&&"absolute"===a&&(A="scrollHeight",C="scrollWidth"),(r===Re||(r===Ue||r===Ve)&&s===Ye)&&(y=ze,m-=(u&&E===w&&w.visualViewport?w.visualViewport.height:E[A])-i.height,m*=l?1:-1),r!==Ue&&(r!==Re&&r!==ze||s!==Ye)||(b=Ve,f-=(u&&E===w&&w.visualViewport?w.visualViewport.width:E[C])-i.width,f*=l?1:-1)}var T,O=Object.assign({position:a},c&&Bt),x=!0===d?function(e){var t=e.x,n=e.y,i=window.devicePixelRatio||1;return{x:Et(t*i)/i||0,y:Et(n*i)/i||0}}({x:f,y:m}):{x:f,y:m};return f=x.x,m=x.y,l?Object.assign({},O,((T={})[y]=v?"0":"",T[b]=_?"0":"",T.transform=(w.devicePixelRatio||1)<=1?"translate("+f+"px, "+m+"px)":"translate3d("+f+"px, "+m+"px, 0)",T)):Object.assign({},O,((t={})[y]=v?m+"px":"",t[b]=_?f+"px":"",t.transform="",t))}const Wt={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,n=e.options,i=n.gpuAcceleration,r=void 0===i||i,s=n.adaptive,o=void 0===s||s,a=n.roundOffsets,l=void 0===a||a,c={placement:bt(t.placement),variation:qt(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:r,isFixed:"fixed"===t.options.strategy};null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign({},t.styles.popper,Ft(Object.assign({},c,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:o,roundOffsets:l})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign({},t.styles.arrow,Ft(Object.assign({},c,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:l})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})},data:{}};var Rt={passive:!0};const zt={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,n=e.instance,i=e.options,r=i.scroll,s=void 0===r||r,o=i.resize,a=void 0===o||o,l=pt(t.elements.popper),c=[].concat(t.scrollParents.reference,t.scrollParents.popper);return s&&c.forEach((function(e){e.addEventListener("scroll",n.update,Rt)})),a&&l.addEventListener("resize",n.update,Rt),function(){s&&c.forEach((function(e){e.removeEventListener("scroll",n.update,Rt)})),a&&l.removeEventListener("resize",n.update,Rt)}},data:{}};var Vt={left:"right",right:"left",bottom:"top",top:"bottom"};function Ut(e){return e.replace(/left|right|bottom|top/g,(function(e){return Vt[e]}))}var Kt={start:"end",end:"start"};function Qt(e){return e.replace(/start|end/g,(function(e){return Kt[e]}))}function Xt(e){var t=pt(e);return{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}function Yt(e){return Tt(Lt(e)).left+Xt(e).scrollLeft}function Gt(e){var t=kt(e),n=t.overflow,i=t.overflowX,r=t.overflowY;return/auto|scroll|overlay|hidden/.test(n+r+i)}function Jt(e){return["html","body","#document"].indexOf(ft(e))>=0?e.ownerDocument.body:gt(e)&&Gt(e)?e:Jt(It(e))}function Zt(e,t){var n;void 0===t&&(t=[]);var i=Jt(e),r=i===(null==(n=e.ownerDocument)?void 0:n.body),s=pt(i),o=r?[s].concat(s.visualViewport||[],Gt(i)?i:[]):i,a=t.concat(o);return r?a:a.concat(Zt(It(o)))}function en(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function tn(e,t,n){return t===Je?en(function(e,t){var n=pt(e),i=Lt(e),r=n.visualViewport,s=i.clientWidth,o=i.clientHeight,a=0,l=0;if(r){s=r.width,o=r.height;var c=Ct();(c||!c&&"fixed"===t)&&(a=r.offsetLeft,l=r.offsetTop)}return{width:s,height:o,x:a+Yt(e),y:l}}(e,n)):mt(t)?function(e,t){var n=Tt(e,!1,"fixed"===t);return n.top=n.top+e.clientTop,n.left=n.left+e.clientLeft,n.bottom=n.top+e.clientHeight,n.right=n.left+e.clientWidth,n.width=e.clientWidth,n.height=e.clientHeight,n.x=n.left,n.y=n.top,n}(t,n):en(function(e){var t,n=Lt(e),i=Xt(e),r=null==(t=e.ownerDocument)?void 0:t.body,s=yt(n.scrollWidth,n.clientWidth,r?r.scrollWidth:0,r?r.clientWidth:0),o=yt(n.scrollHeight,n.clientHeight,r?r.scrollHeight:0,r?r.clientHeight:0),a=-i.scrollLeft+Yt(e),l=-i.scrollTop;return"rtl"===kt(r||n).direction&&(a+=yt(n.clientWidth,r?r.clientWidth:0)-s),{width:s,height:o,x:a,y:l}}(Lt(e)))}function nn(e,t,n,i){var r="clippingParents"===t?function(e){var t=Zt(It(e)),n=["absolute","fixed"].indexOf(kt(e).position)>=0&&gt(e)?$t(e):e;return mt(n)?t.filter((function(e){return mt(e)&&xt(e,n)&&"body"!==ft(e)})):[]}(e):[].concat(t),s=[].concat(r,[n]),o=s[0],a=s.reduce((function(t,n){var r=tn(e,n,i);return t.top=yt(r.top,t.top),t.right=wt(r.right,t.right),t.bottom=wt(r.bottom,t.bottom),t.left=yt(r.left,t.left),t}),tn(e,o,i));return a.width=a.right-a.left,a.height=a.bottom-a.top,a.x=a.left,a.y=a.top,a}function rn(e){var t,n=e.reference,i=e.element,r=e.placement,s=r?bt(r):null,o=r?qt(r):null,a=n.x+n.width/2-i.width/2,l=n.y+n.height/2-i.height/2;switch(s){case Re:t={x:a,y:n.y-i.height};break;case ze:t={x:a,y:n.y+n.height};break;case Ve:t={x:n.x+n.width,y:l};break;case Ue:t={x:n.x-i.width,y:l};break;default:t={x:n.x,y:n.y}}var c=s?Nt(s):null;if(null!=c){var d="y"===c?"height":"width";switch(o){case Xe:t[c]=t[c]-(n[d]/2-i[d]/2);break;case Ye:t[c]=t[c]+(n[d]/2-i[d]/2)}}return t}function sn(e,t){void 0===t&&(t={});var n=t,i=n.placement,r=void 0===i?e.placement:i,s=n.strategy,o=void 0===s?e.strategy:s,a=n.boundary,l=void 0===a?Ge:a,c=n.rootBoundary,d=void 0===c?Je:c,u=n.elementContext,h=void 0===u?Ze:u,f=n.altBoundary,p=void 0!==f&&f,m=n.padding,g=void 0===m?0:m,_=Pt("number"!=typeof g?g:Mt(g,Qe)),v=h===Ze?et:Ze,b=e.rects.popper,y=e.elements[p?v:h],w=nn(mt(y)?y:y.contextElement||Lt(e.elements.popper),l,d,o),E=Tt(e.elements.reference),A=rn({reference:E,element:b,strategy:"absolute",placement:r}),C=en(Object.assign({},b,A)),T=h===Ze?C:E,O={top:w.top-T.top+_.top,bottom:T.bottom-w.bottom+_.bottom,left:w.left-T.left+_.left,right:T.right-w.right+_.right},x=e.modifiersData.offset;if(h===Ze&&x){var k=x[r];Object.keys(O).forEach((function(e){var t=[Ve,ze].indexOf(e)>=0?1:-1,n=[Re,ze].indexOf(e)>=0?"y":"x";O[e]+=k[n]*t}))}return O}function on(e,t){void 0===t&&(t={});var n=t,i=n.placement,r=n.boundary,s=n.rootBoundary,o=n.padding,a=n.flipVariations,l=n.allowedAutoPlacements,c=void 0===l?nt:l,d=qt(i),u=d?a?tt:tt.filter((function(e){return qt(e)===d})):Qe,h=u.filter((function(e){return c.indexOf(e)>=0}));0===h.length&&(h=u);var f=h.reduce((function(t,n){return t[n]=sn(e,{placement:n,boundary:r,rootBoundary:s,padding:o})[bt(n)],t}),{});return Object.keys(f).sort((function(e,t){return f[e]-f[t]}))}const an={name:"flip",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,i=e.name;if(!t.modifiersData[i]._skip){for(var r=n.mainAxis,s=void 0===r||r,o=n.altAxis,a=void 0===o||o,l=n.fallbackPlacements,c=n.padding,d=n.boundary,u=n.rootBoundary,h=n.altBoundary,f=n.flipVariations,p=void 0===f||f,m=n.allowedAutoPlacements,g=t.options.placement,_=bt(g),v=l||(_!==g&&p?function(e){if(bt(e)===Ke)return[];var t=Ut(e);return[Qt(e),t,Qt(t)]}(g):[Ut(g)]),b=[g].concat(v).reduce((function(e,n){return e.concat(bt(n)===Ke?on(t,{placement:n,boundary:d,rootBoundary:u,padding:c,flipVariations:p,allowedAutoPlacements:m}):n)}),[]),y=t.rects.reference,w=t.rects.popper,E=new Map,A=!0,C=b[0],T=0;T<b.length;T++){var O=b[T],x=bt(O),k=qt(O)===Xe,D=[Re,ze].indexOf(x)>=0,L=D?"width":"height",I=sn(t,{placement:O,boundary:d,rootBoundary:u,altBoundary:h,padding:c}),S=D?k?Ve:Ue:k?ze:Re;y[L]>w[L]&&(S=Ut(S));var $=Ut(S),N=[];if(s&&N.push(I[x]<=0),a&&N.push(I[S]<=0,I[$]<=0),N.every((function(e){return e}))){C=O,A=!1;break}E.set(O,N)}if(A)for(var j=function(e){var t=b.find((function(t){var n=E.get(t);if(n)return n.slice(0,e).every((function(e){return e}))}));if(t)return C=t,"break"},P=p?3:1;P>0&&"break"!==j(P);P--);t.placement!==C&&(t.modifiersData[i]._skip=!0,t.placement=C,t.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function ln(e,t,n){return void 0===n&&(n={x:0,y:0}),{top:e.top-t.height-n.y,right:e.right-t.width+n.x,bottom:e.bottom-t.height+n.y,left:e.left-t.width-n.x}}function cn(e){return[Re,Ve,ze,Ue].some((function(t){return e[t]>=0}))}const dn={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,n=e.name,i=t.rects.reference,r=t.rects.popper,s=t.modifiersData.preventOverflow,o=sn(t,{elementContext:"reference"}),a=sn(t,{altBoundary:!0}),l=ln(o,i),c=ln(a,r,s),d=cn(l),u=cn(c);t.modifiersData[n]={referenceClippingOffsets:l,popperEscapeOffsets:c,isReferenceHidden:d,hasPopperEscaped:u},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":d,"data-popper-escaped":u})}};const un={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var t=e.state,n=e.options,i=e.name,r=n.offset,s=void 0===r?[0,0]:r,o=nt.reduce((function(e,n){return e[n]=function(e,t,n){var i=bt(e),r=[Ue,Re].indexOf(i)>=0?-1:1,s="function"==typeof n?n(Object.assign({},t,{placement:e})):n,o=s[0],a=s[1];return o=o||0,a=(a||0)*r,[Ue,Ve].indexOf(i)>=0?{x:a,y:o}:{x:o,y:a}}(n,t.rects,s),e}),{}),a=o[t.placement],l=a.x,c=a.y;null!=t.modifiersData.popperOffsets&&(t.modifiersData.popperOffsets.x+=l,t.modifiersData.popperOffsets.y+=c),t.modifiersData[i]=o}};const hn={name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,n=e.name;t.modifiersData[n]=rn({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}};const fn={name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,i=e.name,r=n.mainAxis,s=void 0===r||r,o=n.altAxis,a=void 0!==o&&o,l=n.boundary,c=n.rootBoundary,d=n.altBoundary,u=n.padding,h=n.tether,f=void 0===h||h,p=n.tetherOffset,m=void 0===p?0:p,g=sn(t,{boundary:l,rootBoundary:c,padding:u,altBoundary:d}),_=bt(t.placement),v=qt(t.placement),b=!v,y=Nt(_),w="x"===y?"y":"x",E=t.modifiersData.popperOffsets,A=t.rects.reference,C=t.rects.popper,T="function"==typeof m?m(Object.assign({},t.rects,{placement:t.placement})):m,O="number"==typeof T?{mainAxis:T,altAxis:T}:Object.assign({mainAxis:0,altAxis:0},T),x=t.modifiersData.offset?t.modifiersData.offset[t.placement]:null,k={x:0,y:0};if(E){if(s){var D,L="y"===y?Re:Ue,I="y"===y?ze:Ve,S="y"===y?"height":"width",$=E[y],N=$+g[L],j=$-g[I],P=f?-C[S]/2:0,M=v===Xe?A[S]:C[S],H=v===Xe?-C[S]:-A[S],q=t.elements.arrow,B=f&&q?Ot(q):{width:0,height:0},F=t.modifiersData["arrow#persistent"]?t.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},W=F[L],R=F[I],z=jt(0,A[S],B[S]),V=b?A[S]/2-P-z-W-O.mainAxis:M-z-W-O.mainAxis,U=b?-A[S]/2+P+z+R+O.mainAxis:H+z+R+O.mainAxis,K=t.elements.arrow&&$t(t.elements.arrow),Q=K?"y"===y?K.clientTop||0:K.clientLeft||0:0,X=null!=(D=null==x?void 0:x[y])?D:0,Y=$+U-X,G=jt(f?wt(N,$+V-X-Q):N,$,f?yt(j,Y):j);E[y]=G,k[y]=G-$}if(a){var J,Z="x"===y?Re:Ue,ee="x"===y?ze:Ve,te=E[w],ne="y"===w?"height":"width",ie=te+g[Z],re=te-g[ee],se=-1!==[Re,Ue].indexOf(_),oe=null!=(J=null==x?void 0:x[w])?J:0,ae=se?ie:te-A[ne]-C[ne]-oe+O.altAxis,le=se?te+A[ne]+C[ne]-oe-O.altAxis:re,ce=f&&se?function(e,t,n){var i=jt(e,t,n);return i>n?n:i}(ae,te,le):jt(f?ae:ie,te,f?le:re);E[w]=ce,k[w]=ce-te}t.modifiersData[i]=k}},requiresIfExists:["offset"]};function pn(e,t,n){void 0===n&&(n=!1);var i,r,s=gt(t),o=gt(t)&&function(e){var t=e.getBoundingClientRect(),n=Et(t.width)/e.offsetWidth||1,i=Et(t.height)/e.offsetHeight||1;return 1!==n||1!==i}(t),a=Lt(t),l=Tt(e,o,n),c={scrollLeft:0,scrollTop:0},d={x:0,y:0};return(s||!s&&!n)&&(("body"!==ft(t)||Gt(a))&&(c=(i=t)!==pt(i)&&gt(i)?{scrollLeft:(r=i).scrollLeft,scrollTop:r.scrollTop}:Xt(i)),gt(t)?((d=Tt(t,!0)).x+=t.clientLeft,d.y+=t.clientTop):a&&(d.x=Yt(a))),{x:l.left+c.scrollLeft-d.x,y:l.top+c.scrollTop-d.y,width:l.width,height:l.height}}function mn(e){var t=new Map,n=new Set,i=[];function r(e){n.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach((function(e){if(!n.has(e)){var i=t.get(e);i&&r(i)}})),i.push(e)}return e.forEach((function(e){t.set(e.name,e)})),e.forEach((function(e){n.has(e.name)||r(e)})),i}var gn={placement:"bottom",modifiers:[],strategy:"absolute"};function _n(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return!t.some((function(e){return!(e&&"function"==typeof e.getBoundingClientRect)}))}function vn(e){void 0===e&&(e={});var t=e,n=t.defaultModifiers,i=void 0===n?[]:n,r=t.defaultOptions,s=void 0===r?gn:r;return function(e,t,n){void 0===n&&(n=s);var r,o,a={placement:"bottom",orderedModifiers:[],options:Object.assign({},gn,s),modifiersData:{},elements:{reference:e,popper:t},attributes:{},styles:{}},l=[],c=!1,d={state:a,setOptions:function(n){var r="function"==typeof n?n(a.options):n;u(),a.options=Object.assign({},s,a.options,r),a.scrollParents={reference:mt(e)?Zt(e):e.contextElement?Zt(e.contextElement):[],popper:Zt(t)};var o,c,h=function(e){var t=mn(e);return ht.reduce((function(e,n){return e.concat(t.filter((function(e){return e.phase===n})))}),[])}((o=[].concat(i,a.options.modifiers),c=o.reduce((function(e,t){var n=e[t.name];return e[t.name]=n?Object.assign({},n,t,{options:Object.assign({},n.options,t.options),data:Object.assign({},n.data,t.data)}):t,e}),{}),Object.keys(c).map((function(e){return c[e]}))));return a.orderedModifiers=h.filter((function(e){return e.enabled})),a.orderedModifiers.forEach((function(e){var t=e.name,n=e.options,i=void 0===n?{}:n,r=e.effect;if("function"==typeof r){var s=r({state:a,name:t,instance:d,options:i}),o=function(){};l.push(s||o)}})),d.update()},forceUpdate:function(){if(!c){var e=a.elements,t=e.reference,n=e.popper;if(_n(t,n)){a.rects={reference:pn(t,$t(n),"fixed"===a.options.strategy),popper:Ot(n)},a.reset=!1,a.placement=a.options.placement,a.orderedModifiers.forEach((function(e){return a.modifiersData[e.name]=Object.assign({},e.data)}));for(var i=0;i<a.orderedModifiers.length;i++)if(!0!==a.reset){var r=a.orderedModifiers[i],s=r.fn,o=r.options,l=void 0===o?{}:o,u=r.name;"function"==typeof s&&(a=s({state:a,options:l,name:u,instance:d})||a)}else a.reset=!1,i=-1}}},update:(r=function(){return new Promise((function(e){d.forceUpdate(),e(a)}))},function(){return o||(o=new Promise((function(e){Promise.resolve().then((function(){o=void 0,e(r())}))}))),o}),destroy:function(){u(),c=!0}};if(!_n(e,t))return d;function u(){l.forEach((function(e){return e()})),l=[]}return d.setOptions(n).then((function(e){!c&&n.onFirstUpdate&&n.onFirstUpdate(e)})),d}}var bn=vn(),yn=vn({defaultModifiers:[zt,hn,Wt,vt]}),wn=vn({defaultModifiers:[zt,hn,Wt,vt,un,an,fn,Ht,dn]});const En=Object.freeze(Object.defineProperty({__proto__:null,popperGenerator:vn,detectOverflow:sn,createPopperBase:bn,createPopper:wn,createPopperLite:yn,top:Re,bottom:ze,right:Ve,left:Ue,auto:Ke,basePlacements:Qe,start:Xe,end:Ye,clippingParents:Ge,viewport:Je,popper:Ze,reference:et,variationPlacements:tt,placements:nt,beforeRead:it,read:rt,afterRead:st,beforeMain:ot,main:at,afterMain:lt,beforeWrite:ct,write:dt,afterWrite:ut,modifierPhases:ht,applyStyles:vt,arrow:Ht,computeStyles:Wt,eventListeners:zt,flip:an,hide:dn,offset:un,popperOffsets:hn,preventOverflow:fn},Symbol.toStringTag,{value:"Module"})),An="dropdown",Cn=".bs.dropdown",Tn=".data-api",On="ArrowUp",xn="ArrowDown",kn=`hide${Cn}`,Dn=`hidden${Cn}`,Ln=`show${Cn}`,In=`shown${Cn}`,Sn=`click${Cn}${Tn}`,$n=`keydown${Cn}${Tn}`,Nn=`keyup${Cn}${Tn}`,jn="show",Pn='[data-bs-toggle="dropdown"]:not(.disabled):not(:disabled)',Mn=`${Pn}.${jn}`,Hn=".dropdown-menu",qn=p()?"top-end":"top-start",Bn=p()?"top-start":"top-end",Fn=p()?"bottom-end":"bottom-start",Wn=p()?"bottom-start":"bottom-end",Rn=p()?"left-start":"right-start",zn=p()?"right-start":"left-start",Vn={autoClose:!0,boundary:"clippingParents",display:"dynamic",offset:[0,2],popperConfig:null,reference:"toggle"},Un={autoClose:"(boolean|string)",boundary:"(string|element)",display:"string",offset:"(array|string|function)",popperConfig:"(null|object|function)",reference:"(string|element|object)"};class Kn extends W{constructor(e,t){super(e,t),this._popper=null,this._parent=this._element.parentNode,this._menu=Y.next(this._element,Hn)[0]||Y.prev(this._element,Hn)[0]||Y.findOne(Hn,this._parent),this._inNavbar=this._detectNavbar()}static get Default(){return Vn}static get DefaultType(){return Un}static get NAME(){return An}toggle(){return this._isShown()?this.hide():this.show()}show(){if(l(this._element)||this._isShown())return;const e={relatedTarget:this._element};if(!N.trigger(this._element,Ln,e).defaultPrevented){if(this._createPopper(),"ontouchstart"in document.documentElement&&!this._parent.closest(".navbar-nav"))for(const e of[].concat(...document.body.children))N.on(e,"mouseover",d);this._element.focus(),this._element.setAttribute("aria-expanded",!0),this._menu.classList.add(jn),this._element.classList.add(jn),N.trigger(this._element,In,e)}}hide(){if(l(this._element)||!this._isShown())return;const e={relatedTarget:this._element};this._completeHide(e)}dispose(){this._popper&&this._popper.destroy(),super.dispose()}update(){this._inNavbar=this._detectNavbar(),this._popper&&this._popper.update()}_completeHide(e){if(!N.trigger(this._element,kn,e).defaultPrevented){if("ontouchstart"in document.documentElement)for(const e of[].concat(...document.body.children))N.off(e,"mouseover",d);this._popper&&this._popper.destroy(),this._menu.classList.remove(jn),this._element.classList.remove(jn),this._element.setAttribute("aria-expanded","false"),B.removeDataAttribute(this._menu,"popper"),N.trigger(this._element,Dn,e)}}_getConfig(e){if("object"==typeof(e=super._getConfig(e)).reference&&!s(e.reference)&&"function"!=typeof e.reference.getBoundingClientRect)throw new TypeError(`${An.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);return e}_createPopper(){if(void 0===En)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");let e=this._element;"parent"===this._config.reference?e=this._parent:s(this._config.reference)?e=o(this._config.reference):"object"==typeof this._config.reference&&(e=this._config.reference);const t=this._getPopperConfig();this._popper=wn(e,this._menu,t)}_isShown(){return this._menu.classList.contains(jn)}_getPlacement(){const e=this._parent;if(e.classList.contains("dropend"))return Rn;if(e.classList.contains("dropstart"))return zn;if(e.classList.contains("dropup-center"))return"top";if(e.classList.contains("dropdown-center"))return"bottom";const t="end"===getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();return e.classList.contains("dropup")?t?Bn:qn:t?Wn:Fn}_detectNavbar(){return null!==this._element.closest(".navbar")}_getOffset(){const{offset:e}=this._config;return"string"==typeof e?e.split(",").map((e=>Number.parseInt(e,10))):"function"==typeof e?t=>e(t,this._element):e}_getPopperConfig(){const e={placement:this._getPlacement(),modifiers:[{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"offset",options:{offset:this._getOffset()}}]};return(this._inNavbar||"static"===this._config.display)&&(B.setDataAttribute(this._menu,"popper","static"),e.modifiers=[{name:"applyStyles",enabled:!1}]),{...e,..."function"==typeof this._config.popperConfig?this._config.popperConfig(e):this._config.popperConfig}}_selectMenuItem({key:e,target:t}){const n=Y.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",this._menu).filter((e=>a(e)));n.length&&v(n,t,e===xn,!n.includes(t)).focus()}static jQueryInterface(e){return this.each((function(){const t=Kn.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}static clearMenus(e){if(2===e.button||"keyup"===e.type&&"Tab"!==e.key)return;const t=Y.find(Mn);for(const n of t){const t=Kn.getInstance(n);if(!t||!1===t._config.autoClose)continue;const i=e.composedPath(),r=i.includes(t._menu);if(i.includes(t._element)||"inside"===t._config.autoClose&&!r||"outside"===t._config.autoClose&&r)continue;if(t._menu.contains(e.target)&&("keyup"===e.type&&"Tab"===e.key||/input|select|option|textarea|form/i.test(e.target.tagName)))continue;const s={relatedTarget:t._element};"click"===e.type&&(s.clickEvent=e),t._completeHide(s)}}static dataApiKeydownHandler(e){const t=/input|textarea/i.test(e.target.tagName),n="Escape"===e.key,i=[On,xn].includes(e.key);if(!i&&!n)return;if(t&&!n)return;e.preventDefault();const r=this.matches(Pn)?this:Y.prev(this,Pn)[0]||Y.next(this,Pn)[0]||Y.findOne(Pn,e.delegateTarget.parentNode),s=Kn.getOrCreateInstance(r);if(i)return e.stopPropagation(),s.show(),void s._selectMenuItem(e);s._isShown()&&(e.stopPropagation(),s.hide(),r.focus())}}N.on(document,$n,Pn,Kn.dataApiKeydownHandler),N.on(document,$n,Hn,Kn.dataApiKeydownHandler),N.on(document,Sn,Kn.clearMenus),N.on(document,Nn,Kn.clearMenus),N.on(document,Sn,Pn,(function(e){e.preventDefault(),Kn.getOrCreateInstance(this).toggle()})),m(Kn);const Qn=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",Xn=".sticky-top",Yn="padding-right",Gn="margin-right";class Jn{constructor(){this._element=document.body}getWidth(){const e=document.documentElement.clientWidth;return Math.abs(window.innerWidth-e)}hide(){const e=this.getWidth();this._disableOverFlow(),this._setElementAttributes(this._element,Yn,(t=>t+e)),this._setElementAttributes(Qn,Yn,(t=>t+e)),this._setElementAttributes(Xn,Gn,(t=>t-e))}reset(){this._resetElementAttributes(this._element,"overflow"),this._resetElementAttributes(this._element,Yn),this._resetElementAttributes(Qn,Yn),this._resetElementAttributes(Xn,Gn)}isOverflowing(){return this.getWidth()>0}_disableOverFlow(){this._saveInitialAttribute(this._element,"overflow"),this._element.style.overflow="hidden"}_setElementAttributes(e,t,n){const i=this.getWidth();this._applyManipulationCallback(e,(e=>{if(e!==this._element&&window.innerWidth>e.clientWidth+i)return;this._saveInitialAttribute(e,t);const r=window.getComputedStyle(e).getPropertyValue(t);e.style.setProperty(t,`${n(Number.parseFloat(r))}px`)}))}_saveInitialAttribute(e,t){const n=e.style.getPropertyValue(t);n&&B.setDataAttribute(e,t,n)}_resetElementAttributes(e,t){this._applyManipulationCallback(e,(e=>{const n=B.getDataAttribute(e,t);null!==n?(B.removeDataAttribute(e,t),e.style.setProperty(t,n)):e.style.removeProperty(t)}))}_applyManipulationCallback(e,t){if(s(e))t(e);else for(const n of Y.find(e,this._element))t(n)}}const Zn="backdrop",ei="show",ti=`mousedown.bs.${Zn}`,ni={className:"modal-backdrop",clickCallback:null,isAnimated:!1,isVisible:!0,rootElement:"body"},ii={className:"string",clickCallback:"(function|null)",isAnimated:"boolean",isVisible:"boolean",rootElement:"(element|string)"};class ri extends F{constructor(e){super(),this._config=this._getConfig(e),this._isAppended=!1,this._element=null}static get Default(){return ni}static get DefaultType(){return ii}static get NAME(){return Zn}show(e){if(!this._config.isVisible)return void g(e);this._append();const t=this._getElement();this._config.isAnimated&&u(t),t.classList.add(ei),this._emulateAnimation((()=>{g(e)}))}hide(e){this._config.isVisible?(this._getElement().classList.remove(ei),this._emulateAnimation((()=>{this.dispose(),g(e)}))):g(e)}dispose(){this._isAppended&&(N.off(this._element,ti),this._element.remove(),this._isAppended=!1)}_getElement(){if(!this._element){const e=document.createElement("div");e.className=this._config.className,this._config.isAnimated&&e.classList.add("fade"),this._element=e}return this._element}_configAfterMerge(e){return e.rootElement=o(e.rootElement),e}_append(){if(this._isAppended)return;const e=this._getElement();this._config.rootElement.append(e),N.on(e,ti,(()=>{g(this._config.clickCallback)})),this._isAppended=!0}_emulateAnimation(e){_(e,this._getElement(),this._config.isAnimated)}}const si=".bs.focustrap",oi=`focusin${si}`,ai=`keydown.tab${si}`,li="backward",ci={autofocus:!0,trapElement:null},di={autofocus:"boolean",trapElement:"element"};class ui extends F{constructor(e){super(),this._config=this._getConfig(e),this._isActive=!1,this._lastTabNavDirection=null}static get Default(){return ci}static get DefaultType(){return di}static get NAME(){return"focustrap"}activate(){this._isActive||(this._config.autofocus&&this._config.trapElement.focus(),N.off(document,si),N.on(document,oi,(e=>this._handleFocusin(e))),N.on(document,ai,(e=>this._handleKeydown(e))),this._isActive=!0)}deactivate(){this._isActive&&(this._isActive=!1,N.off(document,si))}_handleFocusin(e){const{trapElement:t}=this._config;if(e.target===document||e.target===t||t.contains(e.target))return;const n=Y.focusableChildren(t);0===n.length?t.focus():this._lastTabNavDirection===li?n[n.length-1].focus():n[0].focus()}_handleKeydown(e){"Tab"===e.key&&(this._lastTabNavDirection=e.shiftKey?li:"forward")}}const hi=".bs.modal",fi=`hide${hi}`,pi=`hidePrevented${hi}`,mi=`hidden${hi}`,gi=`show${hi}`,_i=`shown${hi}`,vi=`resize${hi}`,bi=`click.dismiss${hi}`,yi=`mousedown.dismiss${hi}`,wi=`keydown.dismiss${hi}`,Ei=`click${hi}.data-api`,Ai="modal-open",Ci="show",Ti="modal-static",Oi={backdrop:!0,focus:!0,keyboard:!0},xi={backdrop:"(boolean|string)",focus:"boolean",keyboard:"boolean"};class ki extends W{constructor(e,t){super(e,t),this._dialog=Y.findOne(".modal-dialog",this._element),this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._isShown=!1,this._isTransitioning=!1,this._scrollBar=new Jn,this._addEventListeners()}static get Default(){return Oi}static get DefaultType(){return xi}static get NAME(){return"modal"}toggle(e){return this._isShown?this.hide():this.show(e)}show(e){this._isShown||this._isTransitioning||N.trigger(this._element,gi,{relatedTarget:e}).defaultPrevented||(this._isShown=!0,this._isTransitioning=!0,this._scrollBar.hide(),document.body.classList.add(Ai),this._adjustDialog(),this._backdrop.show((()=>this._showElement(e))))}hide(){this._isShown&&!this._isTransitioning&&(N.trigger(this._element,fi).defaultPrevented||(this._isShown=!1,this._isTransitioning=!0,this._focustrap.deactivate(),this._element.classList.remove(Ci),this._queueCallback((()=>this._hideModal()),this._element,this._isAnimated())))}dispose(){for(const e of[window,this._dialog])N.off(e,hi);this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}handleUpdate(){this._adjustDialog()}_initializeBackDrop(){return new ri({isVisible:Boolean(this._config.backdrop),isAnimated:this._isAnimated()})}_initializeFocusTrap(){return new ui({trapElement:this._element})}_showElement(e){document.body.contains(this._element)||document.body.append(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0;const t=Y.findOne(".modal-body",this._dialog);t&&(t.scrollTop=0),u(this._element),this._element.classList.add(Ci);this._queueCallback((()=>{this._config.focus&&this._focustrap.activate(),this._isTransitioning=!1,N.trigger(this._element,_i,{relatedTarget:e})}),this._dialog,this._isAnimated())}_addEventListeners(){N.on(this._element,wi,(e=>{if("Escape"===e.key)return this._config.keyboard?(e.preventDefault(),void this.hide()):void this._triggerBackdropTransition()})),N.on(window,vi,(()=>{this._isShown&&!this._isTransitioning&&this._adjustDialog()})),N.on(this._element,yi,(e=>{N.one(this._element,bi,(t=>{this._element===e.target&&this._element===t.target&&("static"!==this._config.backdrop?this._config.backdrop&&this.hide():this._triggerBackdropTransition())}))}))}_hideModal(){this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._backdrop.hide((()=>{document.body.classList.remove(Ai),this._resetAdjustments(),this._scrollBar.reset(),N.trigger(this._element,mi)}))}_isAnimated(){return this._element.classList.contains("fade")}_triggerBackdropTransition(){if(N.trigger(this._element,pi).defaultPrevented)return;const e=this._element.scrollHeight>document.documentElement.clientHeight,t=this._element.style.overflowY;"hidden"===t||this._element.classList.contains(Ti)||(e||(this._element.style.overflowY="hidden"),this._element.classList.add(Ti),this._queueCallback((()=>{this._element.classList.remove(Ti),this._queueCallback((()=>{this._element.style.overflowY=t}),this._dialog)}),this._dialog),this._element.focus())}_adjustDialog(){const e=this._element.scrollHeight>document.documentElement.clientHeight,t=this._scrollBar.getWidth(),n=t>0;if(n&&!e){const e=p()?"paddingLeft":"paddingRight";this._element.style[e]=`${t}px`}if(!n&&e){const e=p()?"paddingRight":"paddingLeft";this._element.style[e]=`${t}px`}}_resetAdjustments(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}static jQueryInterface(e,t){return this.each((function(){const n=ki.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===n[e])throw new TypeError(`No method named "${e}"`);n[e](t)}}))}}N.on(document,Ei,'[data-bs-toggle="modal"]',(function(e){const t=i(this);["A","AREA"].includes(this.tagName)&&e.preventDefault(),N.one(t,gi,(e=>{e.defaultPrevented||N.one(t,mi,(()=>{a(this)&&this.focus()}))}));const n=Y.findOne(".modal.show");n&&ki.getInstance(n).hide(),ki.getOrCreateInstance(t).toggle(this)})),R(ki),m(ki);const Di=".bs.offcanvas",Li=".data-api",Ii=`load${Di}${Li}`,Si="show",$i="showing",Ni="hiding",ji=".offcanvas.show",Pi=`show${Di}`,Mi=`shown${Di}`,Hi=`hide${Di}`,qi=`hidePrevented${Di}`,Bi=`hidden${Di}`,Fi=`resize${Di}`,Wi=`click${Di}${Li}`,Ri=`keydown.dismiss${Di}`,zi={backdrop:!0,keyboard:!0,scroll:!1},Vi={backdrop:"(boolean|string)",keyboard:"boolean",scroll:"boolean"};class Ui extends W{constructor(e,t){super(e,t),this._isShown=!1,this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._addEventListeners()}static get Default(){return zi}static get DefaultType(){return Vi}static get NAME(){return"offcanvas"}toggle(e){return this._isShown?this.hide():this.show(e)}show(e){if(this._isShown)return;if(N.trigger(this._element,Pi,{relatedTarget:e}).defaultPrevented)return;this._isShown=!0,this._backdrop.show(),this._config.scroll||(new Jn).hide(),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.classList.add($i);this._queueCallback((()=>{this._config.scroll&&!this._config.backdrop||this._focustrap.activate(),this._element.classList.add(Si),this._element.classList.remove($i),N.trigger(this._element,Mi,{relatedTarget:e})}),this._element,!0)}hide(){if(!this._isShown)return;if(N.trigger(this._element,Hi).defaultPrevented)return;this._focustrap.deactivate(),this._element.blur(),this._isShown=!1,this._element.classList.add(Ni),this._backdrop.hide();this._queueCallback((()=>{this._element.classList.remove(Si,Ni),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._config.scroll||(new Jn).reset(),N.trigger(this._element,Bi)}),this._element,!0)}dispose(){this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}_initializeBackDrop(){const e=Boolean(this._config.backdrop);return new ri({className:"offcanvas-backdrop",isVisible:e,isAnimated:!0,rootElement:this._element.parentNode,clickCallback:e?()=>{"static"!==this._config.backdrop?this.hide():N.trigger(this._element,qi)}:null})}_initializeFocusTrap(){return new ui({trapElement:this._element})}_addEventListeners(){N.on(this._element,Ri,(e=>{"Escape"===e.key&&(this._config.keyboard?this.hide():N.trigger(this._element,qi))}))}static jQueryInterface(e){return this.each((function(){const t=Ui.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}N.on(document,Wi,'[data-bs-toggle="offcanvas"]',(function(e){const t=i(this);if(["A","AREA"].includes(this.tagName)&&e.preventDefault(),l(this))return;N.one(t,Bi,(()=>{a(this)&&this.focus()}));const n=Y.findOne(ji);n&&n!==t&&Ui.getInstance(n).hide(),Ui.getOrCreateInstance(t).toggle(this)})),N.on(window,Ii,(()=>{for(const e of Y.find(ji))Ui.getOrCreateInstance(e).show()})),N.on(window,Fi,(()=>{for(const e of Y.find("[aria-modal][class*=show][class*=offcanvas-]"))"fixed"!==getComputedStyle(e).position&&Ui.getOrCreateInstance(e).hide()})),R(Ui),m(Ui);const Ki=new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"]),Qi=/^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i,Xi=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i,Yi=(e,t)=>{const n=e.nodeName.toLowerCase();return t.includes(n)?!Ki.has(n)||Boolean(Qi.test(e.nodeValue)||Xi.test(e.nodeValue)):t.filter((e=>e instanceof RegExp)).some((e=>e.test(n)))},Gi={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]};const Ji={allowList:Gi,content:{},extraClass:"",html:!1,sanitize:!0,sanitizeFn:null,template:"<div></div>"},Zi={allowList:"object",content:"object",extraClass:"(string|function)",html:"boolean",sanitize:"boolean",sanitizeFn:"(null|function)",template:"string"},er={entry:"(string|element|function|null)",selector:"(string|element)"};class tr extends F{constructor(e){super(),this._config=this._getConfig(e)}static get Default(){return Ji}static get DefaultType(){return Zi}static get NAME(){return"TemplateFactory"}getContent(){return Object.values(this._config.content).map((e=>this._resolvePossibleFunction(e))).filter(Boolean)}hasContent(){return this.getContent().length>0}changeContent(e){return this._checkContent(e),this._config.content={...this._config.content,...e},this}toHtml(){const e=document.createElement("div");e.innerHTML=this._maybeSanitize(this._config.template);for(const[t,n]of Object.entries(this._config.content))this._setContent(e,n,t);const t=e.children[0],n=this._resolvePossibleFunction(this._config.extraClass);return n&&t.classList.add(...n.split(" ")),t}_typeCheckConfig(e){super._typeCheckConfig(e),this._checkContent(e.content)}_checkContent(e){for(const[t,n]of Object.entries(e))super._typeCheckConfig({selector:t,entry:n},er)}_setContent(e,t,n){const i=Y.findOne(n,e);i&&((t=this._resolvePossibleFunction(t))?s(t)?this._putElementInTemplate(o(t),i):this._config.html?i.innerHTML=this._maybeSanitize(t):i.textContent=t:i.remove())}_maybeSanitize(e){return this._config.sanitize?function(e,t,n){if(!e.length)return e;if(n&&"function"==typeof n)return n(e);const i=(new window.DOMParser).parseFromString(e,"text/html"),r=[].concat(...i.body.querySelectorAll("*"));for(const e of r){const n=e.nodeName.toLowerCase();if(!Object.keys(t).includes(n)){e.remove();continue}const i=[].concat(...e.attributes),r=[].concat(t["*"]||[],t[n]||[]);for(const t of i)Yi(t,r)||e.removeAttribute(t.nodeName)}return i.body.innerHTML}(e,this._config.allowList,this._config.sanitizeFn):e}_resolvePossibleFunction(e){return"function"==typeof e?e(this):e}_putElementInTemplate(e,t){if(this._config.html)return t.innerHTML="",void t.append(e);t.textContent=e.textContent}}const nr=new Set(["sanitize","allowList","sanitizeFn"]),ir="fade",rr="show",sr=".modal",or="hide.bs.modal",ar="hover",lr="focus",cr={AUTO:"auto",TOP:"top",RIGHT:p()?"left":"right",BOTTOM:"bottom",LEFT:p()?"right":"left"},dr={allowList:Gi,animation:!0,boundary:"clippingParents",container:!1,customClass:"",delay:0,fallbackPlacements:["top","right","bottom","left"],html:!1,offset:[0,0],placement:"top",popperConfig:null,sanitize:!0,sanitizeFn:null,selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',title:"",trigger:"hover focus"},ur={allowList:"object",animation:"boolean",boundary:"(string|element)",container:"(string|element|boolean)",customClass:"(string|function)",delay:"(number|object)",fallbackPlacements:"array",html:"boolean",offset:"(array|string|function)",placement:"(string|function)",popperConfig:"(null|object|function)",sanitize:"boolean",sanitizeFn:"(null|function)",selector:"(string|boolean)",template:"string",title:"(string|element|function)",trigger:"string"};class hr extends W{constructor(e,t){if(void 0===En)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");super(e,t),this._isEnabled=!0,this._timeout=0,this._isHovered=null,this._activeTrigger={},this._popper=null,this._templateFactory=null,this._newContent=null,this.tip=null,this._setListeners(),this._config.selector||this._fixTitle()}static get Default(){return dr}static get DefaultType(){return ur}static get NAME(){return"tooltip"}enable(){this._isEnabled=!0}disable(){this._isEnabled=!1}toggleEnabled(){this._isEnabled=!this._isEnabled}toggle(){this._isEnabled&&(this._activeTrigger.click=!this._activeTrigger.click,this._isShown()?this._leave():this._enter())}dispose(){clearTimeout(this._timeout),N.off(this._element.closest(sr),or,this._hideModalHandler),this._element.getAttribute("data-bs-original-title")&&this._element.setAttribute("title",this._element.getAttribute("data-bs-original-title")),this._disposePopper(),super.dispose()}show(){if("none"===this._element.style.display)throw new Error("Please use show on visible elements");if(!this._isWithContent()||!this._isEnabled)return;const e=N.trigger(this._element,this.constructor.eventName("show")),t=(c(this._element)||this._element.ownerDocument.documentElement).contains(this._element);if(e.defaultPrevented||!t)return;this._disposePopper();const n=this._getTipElement();this._element.setAttribute("aria-describedby",n.getAttribute("id"));const{container:i}=this._config;if(this._element.ownerDocument.documentElement.contains(this.tip)||(i.append(n),N.trigger(this._element,this.constructor.eventName("inserted"))),this._popper=this._createPopper(n),n.classList.add(rr),"ontouchstart"in document.documentElement)for(const e of[].concat(...document.body.children))N.on(e,"mouseover",d);this._queueCallback((()=>{N.trigger(this._element,this.constructor.eventName("shown")),!1===this._isHovered&&this._leave(),this._isHovered=!1}),this.tip,this._isAnimated())}hide(){if(!this._isShown())return;if(N.trigger(this._element,this.constructor.eventName("hide")).defaultPrevented)return;if(this._getTipElement().classList.remove(rr),"ontouchstart"in document.documentElement)for(const e of[].concat(...document.body.children))N.off(e,"mouseover",d);this._activeTrigger.click=!1,this._activeTrigger[lr]=!1,this._activeTrigger[ar]=!1,this._isHovered=null;this._queueCallback((()=>{this._isWithActiveTrigger()||(this._isHovered||this._disposePopper(),this._element.removeAttribute("aria-describedby"),N.trigger(this._element,this.constructor.eventName("hidden")))}),this.tip,this._isAnimated())}update(){this._popper&&this._popper.update()}_isWithContent(){return Boolean(this._getTitle())}_getTipElement(){return this.tip||(this.tip=this._createTipElement(this._newContent||this._getContentForTemplate())),this.tip}_createTipElement(e){const t=this._getTemplateFactory(e).toHtml();if(!t)return null;t.classList.remove(ir,rr),t.classList.add(`bs-${this.constructor.NAME}-auto`);const n=(e=>{do{e+=Math.floor(1e6*Math.random())}while(document.getElementById(e));return e})(this.constructor.NAME).toString();return t.setAttribute("id",n),this._isAnimated()&&t.classList.add(ir),t}setContent(e){this._newContent=e,this._isShown()&&(this._disposePopper(),this.show())}_getTemplateFactory(e){return this._templateFactory?this._templateFactory.changeContent(e):this._templateFactory=new tr({...this._config,content:e,extraClass:this._resolvePossibleFunction(this._config.customClass)}),this._templateFactory}_getContentForTemplate(){return{".tooltip-inner":this._getTitle()}}_getTitle(){return this._resolvePossibleFunction(this._config.title)||this._element.getAttribute("data-bs-original-title")}_initializeOnDelegatedTarget(e){return this.constructor.getOrCreateInstance(e.delegateTarget,this._getDelegateConfig())}_isAnimated(){return this._config.animation||this.tip&&this.tip.classList.contains(ir)}_isShown(){return this.tip&&this.tip.classList.contains(rr)}_createPopper(e){const t="function"==typeof this._config.placement?this._config.placement.call(this,e,this._element):this._config.placement,n=cr[t.toUpperCase()];return wn(this._element,e,this._getPopperConfig(n))}_getOffset(){const{offset:e}=this._config;return"string"==typeof e?e.split(",").map((e=>Number.parseInt(e,10))):"function"==typeof e?t=>e(t,this._element):e}_resolvePossibleFunction(e){return"function"==typeof e?e.call(this._element):e}_getPopperConfig(e){const t={placement:e,modifiers:[{name:"flip",options:{fallbackPlacements:this._config.fallbackPlacements}},{name:"offset",options:{offset:this._getOffset()}},{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"arrow",options:{element:`.${this.constructor.NAME}-arrow`}},{name:"preSetPlacement",enabled:!0,phase:"beforeMain",fn:e=>{this._getTipElement().setAttribute("data-popper-placement",e.state.placement)}}]};return{...t,..."function"==typeof this._config.popperConfig?this._config.popperConfig(t):this._config.popperConfig}}_setListeners(){const e=this._config.trigger.split(" ");for(const t of e)if("click"===t)N.on(this._element,this.constructor.eventName("click"),this._config.selector,(e=>{this._initializeOnDelegatedTarget(e).toggle()}));else if("manual"!==t){const e=t===ar?this.constructor.eventName("mouseenter"):this.constructor.eventName("focusin"),n=t===ar?this.constructor.eventName("mouseleave"):this.constructor.eventName("focusout");N.on(this._element,e,this._config.selector,(e=>{const t=this._initializeOnDelegatedTarget(e);t._activeTrigger["focusin"===e.type?lr:ar]=!0,t._enter()})),N.on(this._element,n,this._config.selector,(e=>{const t=this._initializeOnDelegatedTarget(e);t._activeTrigger["focusout"===e.type?lr:ar]=t._element.contains(e.relatedTarget),t._leave()}))}this._hideModalHandler=()=>{this._element&&this.hide()},N.on(this._element.closest(sr),or,this._hideModalHandler)}_fixTitle(){const e=this._element.getAttribute("title");e&&(this._element.getAttribute("aria-label")||this._element.textContent.trim()||this._element.setAttribute("aria-label",e),this._element.setAttribute("data-bs-original-title",e),this._element.removeAttribute("title"))}_enter(){this._isShown()||this._isHovered?this._isHovered=!0:(this._isHovered=!0,this._setTimeout((()=>{this._isHovered&&this.show()}),this._config.delay.show))}_leave(){this._isWithActiveTrigger()||(this._isHovered=!1,this._setTimeout((()=>{this._isHovered||this.hide()}),this._config.delay.hide))}_setTimeout(e,t){clearTimeout(this._timeout),this._timeout=setTimeout(e,t)}_isWithActiveTrigger(){return Object.values(this._activeTrigger).includes(!0)}_getConfig(e){const t=B.getDataAttributes(this._element);for(const e of Object.keys(t))nr.has(e)&&delete t[e];return e={...t,..."object"==typeof e&&e?e:{}},e=this._mergeConfigObj(e),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}_configAfterMerge(e){return e.container=!1===e.container?document.body:o(e.container),"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),"number"==typeof e.title&&(e.title=e.title.toString()),"number"==typeof e.content&&(e.content=e.content.toString()),e}_getDelegateConfig(){const e={};for(const t in this._config)this.constructor.Default[t]!==this._config[t]&&(e[t]=this._config[t]);return e.selector=!1,e.trigger="manual",e}_disposePopper(){this._popper&&(this._popper.destroy(),this._popper=null),this.tip&&(this.tip.remove(),this.tip=null)}static jQueryInterface(e){return this.each((function(){const t=hr.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}}m(hr);const fr={...hr.Default,content:"",offset:[0,8],placement:"right",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>',trigger:"click"},pr={...hr.DefaultType,content:"(null|string|element|function)"};class mr extends hr{static get Default(){return fr}static get DefaultType(){return pr}static get NAME(){return"popover"}_isWithContent(){return this._getTitle()||this._getContent()}_getContentForTemplate(){return{".popover-header":this._getTitle(),".popover-body":this._getContent()}}_getContent(){return this._resolvePossibleFunction(this._config.content)}static jQueryInterface(e){return this.each((function(){const t=mr.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}}m(mr);const gr=".bs.scrollspy",_r=`activate${gr}`,vr=`click${gr}`,br=`load${gr}.data-api`,yr="active",wr="[href]",Er=".nav-link",Ar=`${Er}, .nav-item > ${Er}, .list-group-item`,Cr={offset:null,rootMargin:"0px 0px -25%",smoothScroll:!1,target:null,threshold:[.1,.5,1]},Tr={offset:"(number|null)",rootMargin:"string",smoothScroll:"boolean",target:"element",threshold:"array"};class Or extends W{constructor(e,t){super(e,t),this._targetLinks=new Map,this._observableSections=new Map,this._rootElement="visible"===getComputedStyle(this._element).overflowY?null:this._element,this._activeTarget=null,this._observer=null,this._previousScrollData={visibleEntryTop:0,parentScrollTop:0},this.refresh()}static get Default(){return Cr}static get DefaultType(){return Tr}static get NAME(){return"scrollspy"}refresh(){this._initializeTargetsAndObservables(),this._maybeEnableSmoothScroll(),this._observer?this._observer.disconnect():this._observer=this._getNewObserver();for(const e of this._observableSections.values())this._observer.observe(e)}dispose(){this._observer.disconnect(),super.dispose()}_configAfterMerge(e){return e.target=o(e.target)||document.body,e.rootMargin=e.offset?`${e.offset}px 0px -30%`:e.rootMargin,"string"==typeof e.threshold&&(e.threshold=e.threshold.split(",").map((e=>Number.parseFloat(e)))),e}_maybeEnableSmoothScroll(){this._config.smoothScroll&&(N.off(this._config.target,vr),N.on(this._config.target,vr,wr,(e=>{const t=this._observableSections.get(e.target.hash);if(t){e.preventDefault();const n=this._rootElement||window,i=t.offsetTop-this._element.offsetTop;if(n.scrollTo)return void n.scrollTo({top:i,behavior:"smooth"});n.scrollTop=i}})))}_getNewObserver(){const e={root:this._rootElement,threshold:this._config.threshold,rootMargin:this._config.rootMargin};return new IntersectionObserver((e=>this._observerCallback(e)),e)}_observerCallback(e){const t=e=>this._targetLinks.get(`#${e.target.id}`),n=e=>{this._previousScrollData.visibleEntryTop=e.target.offsetTop,this._process(t(e))},i=(this._rootElement||document.documentElement).scrollTop,r=i>=this._previousScrollData.parentScrollTop;this._previousScrollData.parentScrollTop=i;for(const s of e){if(!s.isIntersecting){this._activeTarget=null,this._clearActiveClass(t(s));continue}const e=s.target.offsetTop>=this._previousScrollData.visibleEntryTop;if(r&&e){if(n(s),!i)return}else r||e||n(s)}}_initializeTargetsAndObservables(){this._targetLinks=new Map,this._observableSections=new Map;const e=Y.find(wr,this._config.target);for(const t of e){if(!t.hash||l(t))continue;const e=Y.findOne(t.hash,this._element);a(e)&&(this._targetLinks.set(t.hash,t),this._observableSections.set(t.hash,e))}}_process(e){this._activeTarget!==e&&(this._clearActiveClass(this._config.target),this._activeTarget=e,e.classList.add(yr),this._activateParents(e),N.trigger(this._element,_r,{relatedTarget:e}))}_activateParents(e){if(e.classList.contains("dropdown-item"))Y.findOne(".dropdown-toggle",e.closest(".dropdown")).classList.add(yr);else for(const t of Y.parents(e,".nav, .list-group"))for(const e of Y.prev(t,Ar))e.classList.add(yr)}_clearActiveClass(e){e.classList.remove(yr);const t=Y.find(`${wr}.${yr}`,e);for(const e of t)e.classList.remove(yr)}static jQueryInterface(e){return this.each((function(){const t=Or.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e]()}}))}}N.on(window,br,(()=>{for(const e of Y.find('[data-bs-spy="scroll"]'))Or.getOrCreateInstance(e)})),m(Or);const xr=".bs.tab",kr=`hide${xr}`,Dr=`hidden${xr}`,Lr=`show${xr}`,Ir=`shown${xr}`,Sr=`click${xr}`,$r=`keydown${xr}`,Nr=`load${xr}`,jr="ArrowLeft",Pr="ArrowRight",Mr="ArrowUp",Hr="ArrowDown",qr="active",Br="fade",Fr="show",Wr=":not(.dropdown-toggle)",Rr='[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',zr=`.nav-link${Wr}, .list-group-item${Wr}, [role="tab"]${Wr}, ${Rr}`,Vr=`.${qr}[data-bs-toggle="tab"], .${qr}[data-bs-toggle="pill"], .${qr}[data-bs-toggle="list"]`;class Ur extends W{constructor(e){super(e),this._parent=this._element.closest('.list-group, .nav, [role="tablist"]'),this._parent&&(this._setInitialAttributes(this._parent,this._getChildren()),N.on(this._element,$r,(e=>this._keydown(e))))}static get NAME(){return"tab"}show(){const e=this._element;if(this._elemIsActive(e))return;const t=this._getActiveElem(),n=t?N.trigger(t,kr,{relatedTarget:e}):null;N.trigger(e,Lr,{relatedTarget:t}).defaultPrevented||n&&n.defaultPrevented||(this._deactivate(t,e),this._activate(e,t))}_activate(e,t){if(!e)return;e.classList.add(qr),this._activate(i(e));this._queueCallback((()=>{"tab"===e.getAttribute("role")?(e.removeAttribute("tabindex"),e.setAttribute("aria-selected",!0),this._toggleDropDown(e,!0),N.trigger(e,Ir,{relatedTarget:t})):e.classList.add(Fr)}),e,e.classList.contains(Br))}_deactivate(e,t){if(!e)return;e.classList.remove(qr),e.blur(),this._deactivate(i(e));this._queueCallback((()=>{"tab"===e.getAttribute("role")?(e.setAttribute("aria-selected",!1),e.setAttribute("tabindex","-1"),this._toggleDropDown(e,!1),N.trigger(e,Dr,{relatedTarget:t})):e.classList.remove(Fr)}),e,e.classList.contains(Br))}_keydown(e){if(![jr,Pr,Mr,Hr].includes(e.key))return;e.stopPropagation(),e.preventDefault();const t=[Pr,Hr].includes(e.key),n=v(this._getChildren().filter((e=>!l(e))),e.target,t,!0);n&&(n.focus({preventScroll:!0}),Ur.getOrCreateInstance(n).show())}_getChildren(){return Y.find(zr,this._parent)}_getActiveElem(){return this._getChildren().find((e=>this._elemIsActive(e)))||null}_setInitialAttributes(e,t){this._setAttributeIfNotExists(e,"role","tablist");for(const e of t)this._setInitialAttributesOnChild(e)}_setInitialAttributesOnChild(e){e=this._getInnerElement(e);const t=this._elemIsActive(e),n=this._getOuterElement(e);e.setAttribute("aria-selected",t),n!==e&&this._setAttributeIfNotExists(n,"role","presentation"),t||e.setAttribute("tabindex","-1"),this._setAttributeIfNotExists(e,"role","tab"),this._setInitialAttributesOnTargetPanel(e)}_setInitialAttributesOnTargetPanel(e){const t=i(e);t&&(this._setAttributeIfNotExists(t,"role","tabpanel"),e.id&&this._setAttributeIfNotExists(t,"aria-labelledby",`#${e.id}`))}_toggleDropDown(e,t){const n=this._getOuterElement(e);if(!n.classList.contains("dropdown"))return;const i=(e,i)=>{const r=Y.findOne(e,n);r&&r.classList.toggle(i,t)};i(".dropdown-toggle",qr),i(".dropdown-menu",Fr),n.setAttribute("aria-expanded",t)}_setAttributeIfNotExists(e,t,n){e.hasAttribute(t)||e.setAttribute(t,n)}_elemIsActive(e){return e.classList.contains(qr)}_getInnerElement(e){return e.matches(zr)?e:Y.findOne(zr,e)}_getOuterElement(e){return e.closest(".nav-item, .list-group-item")||e}static jQueryInterface(e){return this.each((function(){const t=Ur.getOrCreateInstance(this);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e]()}}))}}N.on(document,Sr,Rr,(function(e){["A","AREA"].includes(this.tagName)&&e.preventDefault(),l(this)||Ur.getOrCreateInstance(this).show()})),N.on(window,Nr,(()=>{for(const e of Y.find(Vr))Ur.getOrCreateInstance(e)})),m(Ur);const Kr=".bs.toast",Qr=`mouseover${Kr}`,Xr=`mouseout${Kr}`,Yr=`focusin${Kr}`,Gr=`focusout${Kr}`,Jr=`hide${Kr}`,Zr=`hidden${Kr}`,es=`show${Kr}`,ts=`shown${Kr}`,ns="hide",is="show",rs="showing",ss={animation:"boolean",autohide:"boolean",delay:"number"},os={animation:!0,autohide:!0,delay:5e3};class as extends W{constructor(e,t){super(e,t),this._timeout=null,this._hasMouseInteraction=!1,this._hasKeyboardInteraction=!1,this._setListeners()}static get Default(){return os}static get DefaultType(){return ss}static get NAME(){return"toast"}show(){if(N.trigger(this._element,es).defaultPrevented)return;this._clearTimeout(),this._config.animation&&this._element.classList.add("fade");this._element.classList.remove(ns),u(this._element),this._element.classList.add(is,rs),this._queueCallback((()=>{this._element.classList.remove(rs),N.trigger(this._element,ts),this._maybeScheduleHide()}),this._element,this._config.animation)}hide(){if(!this.isShown())return;if(N.trigger(this._element,Jr).defaultPrevented)return;this._element.classList.add(rs),this._queueCallback((()=>{this._element.classList.add(ns),this._element.classList.remove(rs,is),N.trigger(this._element,Zr)}),this._element,this._config.animation)}dispose(){this._clearTimeout(),this.isShown()&&this._element.classList.remove(is),super.dispose()}isShown(){return this._element.classList.contains(is)}_maybeScheduleHide(){this._config.autohide&&(this._hasMouseInteraction||this._hasKeyboardInteraction||(this._timeout=setTimeout((()=>{this.hide()}),this._config.delay)))}_onInteraction(e,t){switch(e.type){case"mouseover":case"mouseout":this._hasMouseInteraction=t;break;case"focusin":case"focusout":this._hasKeyboardInteraction=t}if(t)return void this._clearTimeout();const n=e.relatedTarget;this._element===n||this._element.contains(n)||this._maybeScheduleHide()}_setListeners(){N.on(this._element,Qr,(e=>this._onInteraction(e,!0))),N.on(this._element,Xr,(e=>this._onInteraction(e,!1))),N.on(this._element,Yr,(e=>this._onInteraction(e,!0))),N.on(this._element,Gr,(e=>this._onInteraction(e,!1)))}_clearTimeout(){clearTimeout(this._timeout),this._timeout=null}static jQueryInterface(e){return this.each((function(){const t=as.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}return R(as),m(as),{Alert:K,Button:X,Carousel:ke,Collapse:We,Dropdown:Kn,Modal:ki,Offcanvas:Ui,Popover:mr,ScrollSpy:Or,Tab:Ur,Toast:as,Tooltip:hr}}()},783:(e,t,n)=>{"use strict";var i=n(618),r=Object.create(null),s="undefined"==typeof document,o=Array.prototype.forEach;function a(){}function l(e,t){if(!t){if(!e.href)return;t=e.href.split("?")[0]}if(d(t)&&!1!==e.isLoaded&&t&&t.indexOf(".css")>-1){e.visited=!0;var n=e.cloneNode();n.isLoaded=!1,n.addEventListener("load",(function(){n.isLoaded||(n.isLoaded=!0,e.parentNode.removeChild(e))})),n.addEventListener("error",(function(){n.isLoaded||(n.isLoaded=!0,e.parentNode.removeChild(e))})),n.href="".concat(t,"?").concat(Date.now()),e.nextSibling?e.parentNode.insertBefore(n,e.nextSibling):e.parentNode.appendChild(n)}}function c(){var e=document.querySelectorAll("link");o.call(e,(function(e){!0!==e.visited&&l(e)}))}function d(e){return!!/^https?:/i.test(e)}e.exports=function(e,t){if(s)return console.log("no window.document found, will not HMR CSS"),a;var n,u,h=function(e){var t=r[e];if(!t){if(document.currentScript)t=document.currentScript.src;else{var n=document.getElementsByTagName("script"),s=n[n.length-1];s&&(t=s.src)}r[e]=t}return function(e){if(!t)return null;var n=t.split(/([^\\/]+)\.js$/),r=n&&n[1];return r&&e?e.split(",").map((function(e){var n=new RegExp("".concat(r,"\\.js$"),"g");return i(t.replace(n,"".concat(e.replace(/{fileName}/g,r),".css")))})):[t.replace(".js",".css")]}}(e);return n=function(){var e=h(t.filename),n=function(e){if(!e)return!1;var t=document.querySelectorAll("link"),n=!1;return o.call(t,(function(t){if(t.href){var r=function(e,t){var n;return e=i(e,{stripWWW:!1}),t.some((function(i){e.indexOf(t)>-1&&(n=i)})),n}(t.href,e);d(r)&&!0!==t.visited&&r&&(l(t,r),n=!0)}})),n}(e);if(t.locals)return console.log("[HMR] Detected local css modules. Reload all css"),void c();n?console.log("[HMR] css reload %s",e.join(" ")):(console.log("[HMR] Reload all css"),c())},50,u=0,function(){var e=this,t=arguments;clearTimeout(u),u=setTimeout((function(){return n.apply(e,t)}),50)}}},618:e=>{"use strict";e.exports=function(e){if(e=e.trim(),/^data:/i.test(e))return e;var t=-1!==e.indexOf("//")?e.split("//")[0]+"//":"",n=e.replace(new RegExp(t,"i"),"").split("/"),i=n[0].toLowerCase().replace(/\.$/,"");return n[0]="",t+i+n.reduce((function(e,t){switch(t){case"..":e.pop();break;case".":break;default:e.push(t)}return e}),[]).join("/")}},177:(e,t,n)=>{"use strict";var i=n(783)(e.id,{locals:!1});e.hot.dispose(i),e.hot.accept(void 0,i)}},l={};function c(e){var t=l[e];if(void 0!==t){if(void 0!==t.error)throw t.error;return t.exports}var n=l[e]={id:e,exports:{}};try{var i={id:e,module:n,factory:a[e],require:c};c.i.forEach((function(e){e(i)})),n=i.module,i.factory.call(n.exports,n,n.exports,i.require)}catch(e){throw n.error=e,e}return n.exports}c.m=a,c.c=l,c.i=[],c.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return c.d(t,{a:t}),t},c.d=(e,t)=>{for(var n in t)c.o(t,n)&&!c.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},c.hu=e=>e+"."+c.h()+".hot-update.js",c.miniCssF=e=>"main.css",c.hmrF=()=>"main."+c.h()+".hot-update.json",c.h=()=>"4f364b321563c8a60912",c.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),c.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="ajs:",c.l=(n,i,r,s)=>{if(e[n])e[n].push(i);else{var o,a;if(void 0!==r)for(var l=document.getElementsByTagName("script"),d=0;d<l.length;d++){var u=l[d];if(u.getAttribute("src")==n||u.getAttribute("data-webpack")==t+r){o=u;break}}o||(a=!0,(o=document.createElement("script")).charset="utf-8",o.timeout=120,c.nc&&o.setAttribute("nonce",c.nc),o.setAttribute("data-webpack",t+r),o.src=n),e[n]=[i];var h=(t,i)=>{o.onerror=o.onload=null,clearTimeout(f);var r=e[n];if(delete e[n],o.parentNode&&o.parentNode.removeChild(o),r&&r.forEach((e=>e(i))),t)return t(i)},f=setTimeout(h.bind(null,void 0,{type:"timeout",target:o}),12e4);o.onerror=h.bind(null,o.onerror),o.onload=h.bind(null,o.onload),a&&document.head.appendChild(o)}},(()=>{var e,t,n,i={},r=c.c,s=[],o=[],a="idle",l=0,d=[];function u(e){a=e;for(var t=[],n=0;n<o.length;n++)t[n]=o[n].call(null,e);return Promise.all(t)}function h(){0==--l&&u("ready").then((function(){if(0===l){var e=d;d=[];for(var t=0;t<e.length;t++)e[t]()}}))}function f(e){if("idle"!==a)throw new Error("check() is only allowed in idle status");return u("check").then(c.hmrM).then((function(n){return n?u("prepare").then((function(){var i=[];return t=[],Promise.all(Object.keys(c.hmrC).reduce((function(e,r){return c.hmrC[r](n.c,n.r,n.m,e,t,i),e}),[])).then((function(){return t=function(){return e?m(e):u("ready").then((function(){return i}))},0===l?t():new Promise((function(e){d.push((function(){e(t())}))}));var t}))})):u(g()?"ready":"idle").then((function(){return null}))}))}function p(e){return"ready"!==a?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status (state: "+a+")")})):m(e)}function m(e){e=e||{},g();var i=t.map((function(t){return t(e)}));t=void 0;var r=i.map((function(e){return e.error})).filter(Boolean);if(r.length>0)return u("abort").then((function(){throw r[0]}));var s=u("dispose");i.forEach((function(e){e.dispose&&e.dispose()}));var o,a=u("apply"),l=function(e){o||(o=e)},c=[];return i.forEach((function(e){if(e.apply){var t=e.apply(l);if(t)for(var n=0;n<t.length;n++)c.push(t[n])}})),Promise.all([s,a]).then((function(){return o?u("fail").then((function(){throw o})):n?m(e).then((function(e){return c.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e})):u("idle").then((function(){return c}))}))}function g(){if(n)return t||(t=[]),Object.keys(c.hmrI).forEach((function(e){n.forEach((function(n){c.hmrI[e](n,t)}))})),n=void 0,!0}c.hmrD=i,c.i.push((function(d){var m,g,_,v,b=d.module,y=function(t,n){var i=r[n];if(!i)return t;var o=function(o){if(i.hot.active){if(r[o]){var a=r[o].parents;-1===a.indexOf(n)&&a.push(n)}else s=[n],e=o;-1===i.children.indexOf(o)&&i.children.push(o)}else console.warn("[HMR] unexpected require("+o+") from disposed module "+n),s=[];return t(o)},c=function(e){return{configurable:!0,enumerable:!0,get:function(){return t[e]},set:function(n){t[e]=n}}};for(var d in t)Object.prototype.hasOwnProperty.call(t,d)&&"e"!==d&&Object.defineProperty(o,d,c(d));return o.e=function(e){return function(e){switch(a){case"ready":u("prepare");case"prepare":return l++,e.then(h,h),e;default:return e}}(t.e(e))},o}(d.require,d.id);b.hot=(m=d.id,g=b,v={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:_=e!==m,_requireSelf:function(){s=g.parents.slice(),e=_?void 0:m,c(m)},active:!0,accept:function(e,t,n){if(void 0===e)v._selfAccepted=!0;else if("function"==typeof e)v._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var i=0;i<e.length;i++)v._acceptedDependencies[e[i]]=t||function(){},v._acceptedErrorHandlers[e[i]]=n;else v._acceptedDependencies[e]=t||function(){},v._acceptedErrorHandlers[e]=n},decline:function(e){if(void 0===e)v._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)v._declinedDependencies[e[t]]=!0;else v._declinedDependencies[e]=!0},dispose:function(e){v._disposeHandlers.push(e)},addDisposeHandler:function(e){v._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=v._disposeHandlers.indexOf(e);t>=0&&v._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,a){case"idle":t=[],Object.keys(c.hmrI).forEach((function(e){c.hmrI[e](m,t)})),u("ready");break;case"ready":Object.keys(c.hmrI).forEach((function(e){c.hmrI[e](m,t)}));break;case"prepare":case"check":case"dispose":case"apply":(n=n||[]).push(m)}},check:f,apply:p,status:function(e){if(!e)return a;o.push(e)},addStatusHandler:function(e){o.push(e)},removeStatusHandler:function(e){var t=o.indexOf(e);t>=0&&o.splice(t,1)},data:i[m]},e=void 0,v),b.parents=s,b.children=[],s=[],d.require=y})),c.hmrC={},c.hmrI={}})(),(()=>{var e;c.g.importScripts&&(e=c.g.location+"");var t=c.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),c.p=e})(),n=(e,t,n,i)=>{var r=document.createElement("link");return r.rel="stylesheet",r.type="text/css",r.onerror=r.onload=s=>{if(r.onerror=r.onload=null,"load"===s.type)n();else{var o=s&&("load"===s.type?"missing":s.type),a=s&&s.target&&s.target.href||t,l=new Error("Loading CSS chunk "+e+" failed.\n("+a+")");l.code="CSS_CHUNK_LOAD_FAILED",l.type=o,l.request=a,r.parentNode.removeChild(r),i(l)}},r.href=t,document.head.appendChild(r),r},i=(e,t)=>{for(var n=document.getElementsByTagName("link"),i=0;i<n.length;i++){var r=(o=n[i]).getAttribute("data-href")||o.getAttribute("href");if("stylesheet"===o.rel&&(r===e||r===t))return o}var s=document.getElementsByTagName("style");for(i=0;i<s.length;i++){var o;if((r=(o=s[i]).getAttribute("data-href"))===e||r===t)return o}},r=[],s=[],o=e=>({dispose:()=>{for(var e=0;e<r.length;e++){var t=r[e];t.parentNode&&t.parentNode.removeChild(t)}r.length=0},apply:()=>{for(var e=0;e<s.length;e++)s[e].rel="stylesheet";s.length=0}}),c.hmrC.miniCss=(e,t,a,l,d,u)=>{d.push(o),e.forEach((e=>{var t=c.miniCssF(e),o=c.p+t,a=i(t,o);a&&l.push(new Promise(((t,i)=>{var l=n(e,o,(()=>{l.as="style",l.rel="preload",t()}),i);r.push(a),s.push(l)})))}))},(()=>{var e,t,n,i,r,s=c.hmrS_jsonp=c.hmrS_jsonp||{179:0},o={};function a(t,n){return e=n,new Promise(((e,n)=>{o[t]=e;var i=c.p+c.hu(t),r=new Error;c.l(i,(e=>{if(o[t]){o[t]=void 0;var i=e&&("load"===e.type?"missing":e.type),s=e&&e.target&&e.target.src;r.message="Loading hot update chunk "+t+" failed.\n("+i+": "+s+")",r.name="ChunkLoadError",r.type=i,r.request=s,n(r)}}))}))}function l(e){function o(e){for(var t=[e],n={},i=t.map((function(e){return{chain:[e],id:e}}));i.length>0;){var r=i.pop(),s=r.id,o=r.chain,l=c.c[s];if(l&&(!l.hot._selfAccepted||l.hot._selfInvalidated)){if(l.hot._selfDeclined)return{type:"self-declined",chain:o,moduleId:s};if(l.hot._main)return{type:"unaccepted",chain:o,moduleId:s};for(var d=0;d<l.parents.length;d++){var u=l.parents[d],h=c.c[u];if(h){if(h.hot._declinedDependencies[s])return{type:"declined",chain:o.concat([u]),moduleId:s,parentId:u};-1===t.indexOf(u)&&(h.hot._acceptedDependencies[s]?(n[u]||(n[u]=[]),a(n[u],[s])):(delete n[u],t.push(u),i.push({chain:o.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function a(e,t){for(var n=0;n<t.length;n++){var i=t[n];-1===e.indexOf(i)&&e.push(i)}}c.f&&delete c.f.jsonpHmr,t=void 0;var l={},d=[],u={},h=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var f in n)if(c.o(n,f)){var p,m=n[f],g=!1,_=!1,v=!1,b="";switch((p=m?o(f):{type:"disposed",moduleId:f}).chain&&(b="\nUpdate propagation: "+p.chain.join(" -> ")),p.type){case"self-declined":e.onDeclined&&e.onDeclined(p),e.ignoreDeclined||(g=new Error("Aborted because of self decline: "+p.moduleId+b));break;case"declined":e.onDeclined&&e.onDeclined(p),e.ignoreDeclined||(g=new Error("Aborted because of declined dependency: "+p.moduleId+" in "+p.parentId+b));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(p),e.ignoreUnaccepted||(g=new Error("Aborted because "+f+" is not accepted"+b));break;case"accepted":e.onAccepted&&e.onAccepted(p),_=!0;break;case"disposed":e.onDisposed&&e.onDisposed(p),v=!0;break;default:throw new Error("Unexception type "+p.type)}if(g)return{error:g};if(_)for(f in u[f]=m,a(d,p.outdatedModules),p.outdatedDependencies)c.o(p.outdatedDependencies,f)&&(l[f]||(l[f]=[]),a(l[f],p.outdatedDependencies[f]));v&&(a(d,[p.moduleId]),u[f]=h)}n=void 0;for(var y,w=[],E=0;E<d.length;E++){var A=d[E],C=c.c[A];C&&(C.hot._selfAccepted||C.hot._main)&&u[A]!==h&&!C.hot._selfInvalidated&&w.push({module:A,require:C.hot._requireSelf,errorHandler:C.hot._selfAccepted})}return{dispose:function(){var e;i.forEach((function(e){delete s[e]})),i=void 0;for(var t,n=d.slice();n.length>0;){var r=n.pop(),o=c.c[r];if(o){var a={},u=o.hot._disposeHandlers;for(E=0;E<u.length;E++)u[E].call(null,a);for(c.hmrD[r]=a,o.hot.active=!1,delete c.c[r],delete l[r],E=0;E<o.children.length;E++){var h=c.c[o.children[E]];h&&(e=h.parents.indexOf(r))>=0&&h.parents.splice(e,1)}}}for(var f in l)if(c.o(l,f)&&(o=c.c[f]))for(y=l[f],E=0;E<y.length;E++)t=y[E],(e=o.children.indexOf(t))>=0&&o.children.splice(e,1)},apply:function(t){for(var n in u)c.o(u,n)&&(c.m[n]=u[n]);for(var i=0;i<r.length;i++)r[i](c);for(var s in l)if(c.o(l,s)){var o=c.c[s];if(o){y=l[s];for(var a=[],h=[],f=[],p=0;p<y.length;p++){var m=y[p],g=o.hot._acceptedDependencies[m],_=o.hot._acceptedErrorHandlers[m];if(g){if(-1!==a.indexOf(g))continue;a.push(g),h.push(_),f.push(m)}}for(var v=0;v<a.length;v++)try{a[v].call(null,y)}catch(n){if("function"==typeof h[v])try{h[v](n,{moduleId:s,dependencyId:f[v]})}catch(i){e.onErrored&&e.onErrored({type:"accept-error-handler-errored",moduleId:s,dependencyId:f[v],error:i,originalError:n}),e.ignoreErrored||(t(i),t(n))}else e.onErrored&&e.onErrored({type:"accept-errored",moduleId:s,dependencyId:f[v],error:n}),e.ignoreErrored||t(n)}}}for(var b=0;b<w.length;b++){var E=w[b],A=E.module;try{E.require(A)}catch(n){if("function"==typeof E.errorHandler)try{E.errorHandler(n,{moduleId:A,module:c.c[A]})}catch(i){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:A,error:i,originalError:n}),e.ignoreErrored||(t(i),t(n))}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:A,error:n}),e.ignoreErrored||t(n)}}return d}}}self.webpackHotUpdateajs=(t,i,s)=>{for(var a in i)c.o(i,a)&&(n[a]=i[a],e&&e.push(a));s&&r.push(s),o[t]&&(o[t](),o[t]=void 0)},c.hmrI.jsonp=function(e,t){n||(n={},r=[],i=[],t.push(l)),c.o(n,e)||(n[e]=c.m[e])},c.hmrC.jsonp=function(e,o,d,u,h,f){h.push(l),t={},i=o,n=d.reduce((function(e,t){return e[t]=!1,e}),{}),r=[],e.forEach((function(e){c.o(s,e)&&void 0!==s[e]?(u.push(a(e,f)),t[e]=!0):t[e]=!1})),c.f&&(c.f.jsonpHmr=function(e,n){t&&c.o(t,e)&&!t[e]&&(n.push(a(e)),t[e]=!0)})},c.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(c.p+c.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),c(143)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,